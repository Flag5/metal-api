// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.0
// 	protoc        v3.11.4
// source: v1/machine.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MachineSetup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryDisk  string `protobuf:"bytes,1,opt,name=primaryDisk,proto3" json:"primaryDisk,omitempty"`   // device name of the disk that contains the partition on which the OS is installed
	OsPartition  string `protobuf:"bytes,2,opt,name=osPartition,proto3" json:"osPartition,omitempty"`   // device name of disk partition that has the OS installed
	Initrd       string `protobuf:"bytes,3,opt,name=initrd,proto3" json:"initrd,omitempty"`             // the initrd image
	Cmdline      string `protobuf:"bytes,4,opt,name=cmdline,proto3" json:"cmdline,omitempty"`           // the cmdline
	Kernel       string `protobuf:"bytes,5,opt,name=kernel,proto3" json:"kernel,omitempty"`             // the kernel
	BootloaderID string `protobuf:"bytes,6,opt,name=bootloaderID,proto3" json:"bootloaderID,omitempty"` // the bootloader ID
}

func (x *MachineSetup) Reset() {
	*x = MachineSetup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineSetup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineSetup) ProtoMessage() {}

func (x *MachineSetup) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineSetup.ProtoReflect.Descriptor instead.
func (*MachineSetup) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{0}
}

func (x *MachineSetup) GetPrimaryDisk() string {
	if x != nil {
		return x.PrimaryDisk
	}
	return ""
}

func (x *MachineSetup) GetOsPartition() string {
	if x != nil {
		return x.OsPartition
	}
	return ""
}

func (x *MachineSetup) GetInitrd() string {
	if x != nil {
		return x.Initrd
	}
	return ""
}

func (x *MachineSetup) GetCmdline() string {
	if x != nil {
		return x.Cmdline
	}
	return ""
}

func (x *MachineSetup) GetKernel() string {
	if x != nil {
		return x.Kernel
	}
	return ""
}

func (x *MachineSetup) GetBootloaderID() string {
	if x != nil {
		return x.BootloaderID
	}
	return ""
}

type MachineReinstall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldImageID string        `protobuf:"bytes,1,opt,name=oldImageID,proto3" json:"oldImageID,omitempty"` // the ID of the already existing OS image
	Setup      *MachineSetup `protobuf:"bytes,2,opt,name=setup,proto3" json:"setup,omitempty"`           // the machine setup
}

func (x *MachineReinstall) Reset() {
	*x = MachineReinstall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineReinstall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineReinstall) ProtoMessage() {}

func (x *MachineReinstall) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineReinstall.ProtoReflect.Descriptor instead.
func (*MachineReinstall) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{1}
}

func (x *MachineReinstall) GetOldImageID() string {
	if x != nil {
		return x.OldImageID
	}
	return ""
}

func (x *MachineReinstall) GetSetup() *MachineSetup {
	if x != nil {
		return x.Setup
	}
	return nil
}

type MachineNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID           string   `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`                     // the networkID of the allocated machine in this vrf
	Prefixes            []string `protobuf:"bytes,2,rep,name=prefixes,proto3" json:"prefixes,omitempty"`                       // the prefixes of this network
	IPs                 []string `protobuf:"bytes,3,rep,name=IPs,proto3" json:"IPs,omitempty"`                                 // the ip addresses of the allocated machine in this vrf
	Vrf                 uint64   `protobuf:"varint,4,opt,name=vrf,proto3" json:"vrf,omitempty"`                                // the vrf of the allocated machine
	ASN                 int64    `protobuf:"varint,5,opt,name=ASN,proto3" json:"ASN,omitempty"`                                // ASN number for this network in the bgp configuration
	Private             bool     `protobuf:"varint,6,opt,name=private,proto3" json:"private,omitempty"`                        // indicates whether this network is the private network of this machine
	Nat                 bool     `protobuf:"varint,7,opt,name=nat,proto3" json:"nat,omitempty"`                                // if set to true, packets leaving this network get masqueraded behind interface ip
	DestinationPrefixes []string `protobuf:"bytes,8,rep,name=destinationPrefixes,proto3" json:"destinationPrefixes,omitempty"` // prefixes that are reachable within this network
	Underlay            bool     `protobuf:"varint,9,opt,name=underlay,proto3" json:"underlay,omitempty"`                      // if set to true, this network can be used for underlay communication
}

func (x *MachineNetwork) Reset() {
	*x = MachineNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineNetwork) ProtoMessage() {}

func (x *MachineNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineNetwork.ProtoReflect.Descriptor instead.
func (*MachineNetwork) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{2}
}

func (x *MachineNetwork) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *MachineNetwork) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *MachineNetwork) GetIPs() []string {
	if x != nil {
		return x.IPs
	}
	return nil
}

func (x *MachineNetwork) GetVrf() uint64 {
	if x != nil {
		return x.Vrf
	}
	return 0
}

func (x *MachineNetwork) GetASN() int64 {
	if x != nil {
		return x.ASN
	}
	return 0
}

func (x *MachineNetwork) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *MachineNetwork) GetNat() bool {
	if x != nil {
		return x.Nat
	}
	return false
}

func (x *MachineNetwork) GetDestinationPrefixes() []string {
	if x != nil {
		return x.DestinationPrefixes
	}
	return nil
}

func (x *MachineNetwork) GetUnderlay() bool {
	if x != nil {
		return x.Underlay
	}
	return false
}

type MachineAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created         *timestamp.Timestamp  `protobuf:"bytes,1,opt,name=Created,proto3" json:"Created,omitempty"`                  // the time when the machine was created
	Name            string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                        // the name of the machine
	Description     *wrappers.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`          // a description for this machine
	ProjectID       string                `protobuf:"bytes,4,opt,name=projectID,proto3" json:"projectID,omitempty"`              // the project id that this machine is assigned to
	Image           *ImageResponse        `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`                      // the image assigned to this machine //TODO readonly
	MachineNetworks []*MachineNetwork     `protobuf:"bytes,6,rep,name=machineNetworks,proto3" json:"machineNetworks,omitempty"`  // the networks of this machine
	Hostname        string                `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`                // the hostname which will be used when creating the machine
	SshPubKeys      []string              `protobuf:"bytes,8,rep,name=sshPubKeys,proto3" json:"sshPubKeys,omitempty"`            // the public ssh keys to access the machine with
	UserData        *wrappers.StringValue `protobuf:"bytes,9,opt,name=userData,proto3" json:"userData,omitempty"`                // userdata to execute post installation tasks
	ConsolePassword *wrappers.StringValue `protobuf:"bytes,10,opt,name=consolePassword,proto3" json:"consolePassword,omitempty"` // the console password which was generated while provisioning
	Succeeded       bool                  `protobuf:"varint,11,opt,name=succeeded,proto3" json:"succeeded,omitempty"`            // if the allocation of the machine was successful, this is set to true
	Reinstall       *MachineReinstall     `protobuf:"bytes,12,opt,name=reinstall,proto3" json:"reinstall,omitempty"`             // indicates whether to reinstall the machine (if not nil)
}

func (x *MachineAllocation) Reset() {
	*x = MachineAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineAllocation) ProtoMessage() {}

func (x *MachineAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineAllocation.ProtoReflect.Descriptor instead.
func (*MachineAllocation) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{3}
}

func (x *MachineAllocation) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *MachineAllocation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineAllocation) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *MachineAllocation) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *MachineAllocation) GetImage() *ImageResponse {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *MachineAllocation) GetMachineNetworks() []*MachineNetwork {
	if x != nil {
		return x.MachineNetworks
	}
	return nil
}

func (x *MachineAllocation) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *MachineAllocation) GetSshPubKeys() []string {
	if x != nil {
		return x.SshPubKeys
	}
	return nil
}

func (x *MachineAllocation) GetUserData() *wrappers.StringValue {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *MachineAllocation) GetConsolePassword() *wrappers.StringValue {
	if x != nil {
		return x.ConsolePassword
	}
	return nil
}

func (x *MachineAllocation) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *MachineAllocation) GetReinstall() *MachineReinstall {
	if x != nil {
		return x.Reinstall
	}
	return nil
}

type MachineHardwareBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memory   uint64                `protobuf:"varint,1,opt,name=memory,proto3" json:"memory,omitempty"`     // the total memory of the machine
	CpuCores uint32                `protobuf:"varint,2,opt,name=cpuCores,proto3" json:"cpuCores,omitempty"` // the number of cpu cores
	Disks    []*MachineBlockDevice `protobuf:"bytes,3,rep,name=disks,proto3" json:"disks,omitempty"`        // the list of block devices of this machine
}

func (x *MachineHardwareBase) Reset() {
	*x = MachineHardwareBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineHardwareBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineHardwareBase) ProtoMessage() {}

func (x *MachineHardwareBase) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineHardwareBase.ProtoReflect.Descriptor instead.
func (*MachineHardwareBase) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{4}
}

func (x *MachineHardwareBase) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *MachineHardwareBase) GetCpuCores() uint32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *MachineHardwareBase) GetDisks() []*MachineBlockDevice {
	if x != nil {
		return x.Disks
	}
	return nil
}

type MachineHardware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *MachineHardwareBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Nics []*MachineNic        `protobuf:"bytes,2,rep,name=nics,proto3" json:"nics,omitempty"` // the list of network interfaces of this machine
}

func (x *MachineHardware) Reset() {
	*x = MachineHardware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineHardware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineHardware) ProtoMessage() {}

func (x *MachineHardware) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineHardware.ProtoReflect.Descriptor instead.
func (*MachineHardware) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{5}
}

func (x *MachineHardware) GetBase() *MachineHardwareBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MachineHardware) GetNics() []*MachineNic {
	if x != nil {
		return x.Nics
	}
	return nil
}

type MachineHardwareExtended struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *MachineHardwareBase  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Nics []*MachineNicExtended `protobuf:"bytes,2,rep,name=nics,proto3" json:"nics,omitempty"` // the list of network interfaces of this machine with extended information
}

func (x *MachineHardwareExtended) Reset() {
	*x = MachineHardwareExtended{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineHardwareExtended) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineHardwareExtended) ProtoMessage() {}

func (x *MachineHardwareExtended) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineHardwareExtended.ProtoReflect.Descriptor instead.
func (*MachineHardwareExtended) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{6}
}

func (x *MachineHardwareExtended) GetBase() *MachineHardwareBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MachineHardwareExtended) GetNics() []*MachineNicExtended {
	if x != nil {
		return x.Nics
	}
	return nil
}

type MachineState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`             // the state of this machine. empty means available for all //TODO enum?
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // a description why this machine is in the given state
}

func (x *MachineState) Reset() {
	*x = MachineState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineState) ProtoMessage() {}

func (x *MachineState) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineState.ProtoReflect.Descriptor instead.
func (*MachineState) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{7}
}

func (x *MachineState) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MachineState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ChassisIdentifyLEDState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`             // the state of this chassis identify LED. empty means LED-OFF //TODO enum?
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // a description why this chassis identify LED is in the given state
}

func (x *ChassisIdentifyLEDState) Reset() {
	*x = ChassisIdentifyLEDState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChassisIdentifyLEDState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisIdentifyLEDState) ProtoMessage() {}

func (x *ChassisIdentifyLEDState) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisIdentifyLEDState.ProtoReflect.Descriptor instead.
func (*ChassisIdentifyLEDState) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{8}
}

func (x *ChassisIdentifyLEDState) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ChassisIdentifyLEDState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type MachineBlockDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`             // the name of this block device
	Size       uint64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`            // the size of this block device
	Primary    bool                    `protobuf:"varint,3,opt,name=primary,proto3" json:"primary,omitempty"`      // whether this disk has the OS installed
	Partitions []*MachineDiskPartition `protobuf:"bytes,4,rep,name=partitions,proto3" json:"partitions,omitempty"` // the partitions of this disk
}

func (x *MachineBlockDevice) Reset() {
	*x = MachineBlockDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineBlockDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineBlockDevice) ProtoMessage() {}

func (x *MachineBlockDevice) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineBlockDevice.ProtoReflect.Descriptor instead.
func (*MachineBlockDevice) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{9}
}

func (x *MachineBlockDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineBlockDevice) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MachineBlockDevice) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *MachineBlockDevice) GetPartitions() []*MachineDiskPartition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type MachineRecentProvisioningEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events                       []*MachineProvisioningEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`                                              // the log of recent machine provisioning events
	LastEventTime                *timestamp.Timestamp        `protobuf:"bytes,2,opt,name=lastEventTime,proto3" json:"lastEventTime,omitempty"`                                // the time where the last event was received
	IncompleteProvisioningCycles uint32                      `protobuf:"varint,3,opt,name=incompleteProvisioningCycles,proto3" json:"incompleteProvisioningCycles,omitempty"` // the amount of incomplete provisioning cycles in the event container
}

func (x *MachineRecentProvisioningEvents) Reset() {
	*x = MachineRecentProvisioningEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineRecentProvisioningEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineRecentProvisioningEvents) ProtoMessage() {}

func (x *MachineRecentProvisioningEvents) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineRecentProvisioningEvents.ProtoReflect.Descriptor instead.
func (*MachineRecentProvisioningEvents) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{10}
}

func (x *MachineRecentProvisioningEvents) GetEvents() []*MachineProvisioningEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *MachineRecentProvisioningEvents) GetLastEventTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastEventTime
	}
	return nil
}

func (x *MachineRecentProvisioningEvents) GetIncompleteProvisioningCycles() uint32 {
	if x != nil {
		return x.IncompleteProvisioningCycles
	}
	return 0
}

type MachineProvisioningEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    *timestamp.Timestamp  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`       // the time that this event was received //TODO readonly
	Event   string                `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`     // description:"the event emitted by the machine
	Message *wrappers.StringValue `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"` // an additional message to add to the event
}

func (x *MachineProvisioningEvent) Reset() {
	*x = MachineProvisioningEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineProvisioningEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineProvisioningEvent) ProtoMessage() {}

func (x *MachineProvisioningEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineProvisioningEvent.ProtoReflect.Descriptor instead.
func (*MachineProvisioningEvent) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{11}
}

func (x *MachineProvisioningEvent) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MachineProvisioningEvent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *MachineProvisioningEvent) GetMessage() *wrappers.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

type MachineLivelinessReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AliveCount   uint32 `protobuf:"varint,1,opt,name=aliveCount,proto3" json:"aliveCount,omitempty"`     // the number of machines alive
	DeadCount    uint32 `protobuf:"varint,2,opt,name=deadCount,proto3" json:"deadCount,omitempty"`       // the number of dead machines
	UnknownCount uint32 `protobuf:"varint,3,opt,name=unknownCount,proto3" json:"unknownCount,omitempty"` // the number of machines with unknown liveliness
}

func (x *MachineLivelinessReport) Reset() {
	*x = MachineLivelinessReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineLivelinessReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineLivelinessReport) ProtoMessage() {}

func (x *MachineLivelinessReport) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineLivelinessReport.ProtoReflect.Descriptor instead.
func (*MachineLivelinessReport) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{12}
}

func (x *MachineLivelinessReport) GetAliveCount() uint32 {
	if x != nil {
		return x.AliveCount
	}
	return 0
}

func (x *MachineLivelinessReport) GetDeadCount() uint32 {
	if x != nil {
		return x.DeadCount
	}
	return 0
}

func (x *MachineLivelinessReport) GetUnknownCount() uint32 {
	if x != nil {
		return x.UnknownCount
	}
	return 0
}

// The bios version
type MachineBIOS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // the bios version
	Vendor  string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`   // the bios vendor
	Date    string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`       // the bios date
}

func (x *MachineBIOS) Reset() {
	*x = MachineBIOS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineBIOS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineBIOS) ProtoMessage() {}

func (x *MachineBIOS) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineBIOS.ProtoReflect.Descriptor instead.
func (*MachineBIOS) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{13}
}

func (x *MachineBIOS) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MachineBIOS) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *MachineBIOS) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// The IPMI connection data
type MachineIPMI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	MacAddress string      `protobuf:"bytes,2,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	User       string      `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Password   string      `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Interface  string      `protobuf:"bytes,5,opt,name=interface,proto3" json:"interface,omitempty"`
	Fru        *MachineFru `protobuf:"bytes,6,opt,name=fru,proto3" json:"fru,omitempty"`
	BmcVersion string      `protobuf:"bytes,7,opt,name=bmcVersion,proto3" json:"bmcVersion,omitempty"`
}

func (x *MachineIPMI) Reset() {
	*x = MachineIPMI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineIPMI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineIPMI) ProtoMessage() {}

func (x *MachineIPMI) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineIPMI.ProtoReflect.Descriptor instead.
func (*MachineIPMI) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{14}
}

func (x *MachineIPMI) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MachineIPMI) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *MachineIPMI) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MachineIPMI) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MachineIPMI) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *MachineIPMI) GetFru() *MachineFru {
	if x != nil {
		return x.Fru
	}
	return nil
}

func (x *MachineIPMI) GetBmcVersion() string {
	if x != nil {
		return x.BmcVersion
	}
	return ""
}

// The Field Replaceable Unit data
type MachineFru struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChassisPartNumber   *wrappers.StringValue `protobuf:"bytes,1,opt,name=chassisPartNumber,proto3" json:"chassisPartNumber,omitempty"`     // the chassis part number
	ChassisPartSerial   *wrappers.StringValue `protobuf:"bytes,2,opt,name=chassisPartSerial,proto3" json:"chassisPartSerial,omitempty"`     // the chassis part serial
	BoardMfg            *wrappers.StringValue `protobuf:"bytes,3,opt,name=boardMfg,proto3" json:"boardMfg,omitempty"`                       // the board mfg
	BoardMfgSerial      *wrappers.StringValue `protobuf:"bytes,4,opt,name=boardMfgSerial,proto3" json:"boardMfgSerial,omitempty"`           // the board mfg serial" optional:"tru
	BoardPartNumber     *wrappers.StringValue `protobuf:"bytes,5,opt,name=boardPartNumber,proto3" json:"boardPartNumber,omitempty"`         // the board part number
	ProductManufacturer *wrappers.StringValue `protobuf:"bytes,6,opt,name=productManufacturer,proto3" json:"productManufacturer,omitempty"` // the product manufacturer
	ProductPartNumber   *wrappers.StringValue `protobuf:"bytes,7,opt,name=productPartNumber,proto3" json:"productPartNumber,omitempty"`     // the product part number
	ProductSerial       *wrappers.StringValue `protobuf:"bytes,8,opt,name=productSerial,proto3" json:"productSerial,omitempty"`             // the product serial
}

func (x *MachineFru) Reset() {
	*x = MachineFru{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineFru) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineFru) ProtoMessage() {}

func (x *MachineFru) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineFru.ProtoReflect.Descriptor instead.
func (*MachineFru) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{15}
}

func (x *MachineFru) GetChassisPartNumber() *wrappers.StringValue {
	if x != nil {
		return x.ChassisPartNumber
	}
	return nil
}

func (x *MachineFru) GetChassisPartSerial() *wrappers.StringValue {
	if x != nil {
		return x.ChassisPartSerial
	}
	return nil
}

func (x *MachineFru) GetBoardMfg() *wrappers.StringValue {
	if x != nil {
		return x.BoardMfg
	}
	return nil
}

func (x *MachineFru) GetBoardMfgSerial() *wrappers.StringValue {
	if x != nil {
		return x.BoardMfgSerial
	}
	return nil
}

func (x *MachineFru) GetBoardPartNumber() *wrappers.StringValue {
	if x != nil {
		return x.BoardPartNumber
	}
	return nil
}

func (x *MachineFru) GetProductManufacturer() *wrappers.StringValue {
	if x != nil {
		return x.ProductManufacturer
	}
	return nil
}

func (x *MachineFru) GetProductPartNumber() *wrappers.StringValue {
	if x != nil {
		return x.ProductPartNumber
	}
	return nil
}

func (x *MachineFru) GetProductSerial() *wrappers.StringValue {
	if x != nil {
		return x.ProductSerial
	}
	return nil
}

type MachineRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string                   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`               // the product uuid of the machine to register
	PartitionID string                   `protobuf:"bytes,2,opt,name=partitionID,proto3" json:"partitionID,omitempty"` // the partition id to register this machine with
	RackID      string                   `protobuf:"bytes,3,opt,name=rackID,proto3" json:"rackID,omitempty"`           // the rack id where this machine is connected to
	Hardware    *MachineHardwareExtended `protobuf:"bytes,4,opt,name=hardware,proto3" json:"hardware,omitempty"`       // the hardware of this machine
	BIOS        *MachineBIOS             `protobuf:"bytes,5,opt,name=BIOS,proto3" json:"BIOS,omitempty"`               // bios information of this machine
	IPMI        *MachineIPMI             `protobuf:"bytes,6,opt,name=IPMI,proto3" json:"IPMI,omitempty"`               // the ipmi access infos
	Tags        []*wrappers.StringValue  `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`               // tags for this machine
}

func (x *MachineRegisterRequest) Reset() {
	*x = MachineRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineRegisterRequest) ProtoMessage() {}

func (x *MachineRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineRegisterRequest.ProtoReflect.Descriptor instead.
func (*MachineRegisterRequest) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{16}
}

func (x *MachineRegisterRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *MachineRegisterRequest) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *MachineRegisterRequest) GetRackID() string {
	if x != nil {
		return x.RackID
	}
	return ""
}

func (x *MachineRegisterRequest) GetHardware() *MachineHardwareExtended {
	if x != nil {
		return x.Hardware
	}
	return nil
}

func (x *MachineRegisterRequest) GetBIOS() *MachineBIOS {
	if x != nil {
		return x.BIOS
	}
	return nil
}

func (x *MachineRegisterRequest) GetIPMI() *MachineIPMI {
	if x != nil {
		return x.IPMI
	}
	return nil
}

func (x *MachineRegisterRequest) GetTags() []*wrappers.StringValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

type MachineAllocateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common      *Common                     `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	UUID        *wrappers.StringValue       `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`               // if this field is set, this specific machine will be allocated if it is not in available state and not currently allocated (overrules size and partition)
	Hostname    *wrappers.StringValue       `protobuf:"bytes,3,opt,name=Hostname,proto3" json:"Hostname,omitempty"`       // the hostname for the allocated machine (defaults to metal)
	ProjectID   string                      `protobuf:"bytes,4,opt,name=projectID,proto3" json:"projectID,omitempty"`     // the project id to assign this machine to
	PartitionID string                      `protobuf:"bytes,5,opt,name=partitionID,proto3" json:"partitionID,omitempty"` // the partition id to assign this machine to
	SizeID      string                      `protobuf:"bytes,6,opt,name=sizeID,proto3" json:"sizeID,omitempty"`           // the size id to assign this machine to
	ImageID     string                      `protobuf:"bytes,7,opt,name=imageID,proto3" json:"imageID,omitempty"`         // the image id to assign this machine to
	UserData    *wrappers.StringValue       `protobuf:"bytes,8,opt,name=UserData,proto3" json:"UserData,omitempty"`       // cloud-init.io compatible userdata must be base64 encoded
	Tags        []*wrappers.StringValue     `protobuf:"bytes,9,rep,name=Tags,proto3" json:"Tags,omitempty"`               // tags for this machine
	Networks    []*MachineAllocationNetwork `protobuf:"bytes,10,rep,name=networks,proto3" json:"networks,omitempty"`      // the networks that this machine will be placed in
	IPs         []*wrappers.StringValue     `protobuf:"bytes,11,rep,name=IPs,proto3" json:"IPs,omitempty"`                // the ips to attach to this machine additionally
	SSHPubKeys  []*wrappers.StringValue     `protobuf:"bytes,99,rep,name=SSHPubKeys,proto3" json:"SSHPubKeys,omitempty"`  // the public ssh keys to access the machine with //TODO move all sshpubkeys fields to last
}

func (x *MachineAllocateRequest) Reset() {
	*x = MachineAllocateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineAllocateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineAllocateRequest) ProtoMessage() {}

func (x *MachineAllocateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineAllocateRequest.ProtoReflect.Descriptor instead.
func (*MachineAllocateRequest) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{17}
}

func (x *MachineAllocateRequest) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *MachineAllocateRequest) GetUUID() *wrappers.StringValue {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *MachineAllocateRequest) GetHostname() *wrappers.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *MachineAllocateRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *MachineAllocateRequest) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *MachineAllocateRequest) GetSizeID() string {
	if x != nil {
		return x.SizeID
	}
	return ""
}

func (x *MachineAllocateRequest) GetImageID() string {
	if x != nil {
		return x.ImageID
	}
	return ""
}

func (x *MachineAllocateRequest) GetUserData() *wrappers.StringValue {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *MachineAllocateRequest) GetTags() []*wrappers.StringValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MachineAllocateRequest) GetNetworks() []*MachineAllocationNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *MachineAllocateRequest) GetIPs() []*wrappers.StringValue {
	if x != nil {
		return x.IPs
	}
	return nil
}

func (x *MachineAllocateRequest) GetSSHPubKeys() []*wrappers.StringValue {
	if x != nil {
		return x.SSHPubKeys
	}
	return nil
}

type MachineAllocationNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID     string              `protobuf:"bytes,1,opt,name=networkID,proto3" json:"networkID,omitempty"`         // the id of the network that this machine will be placed in
	AutoAcquireIP *wrappers.BoolValue `protobuf:"bytes,2,opt,name=autoAcquireIP,proto3" json:"autoAcquireIP,omitempty"` // will automatically acquire an ip in this network if set to true (defaults to true)
}

func (x *MachineAllocationNetwork) Reset() {
	*x = MachineAllocationNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineAllocationNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineAllocationNetwork) ProtoMessage() {}

func (x *MachineAllocationNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineAllocationNetwork.ProtoReflect.Descriptor instead.
func (*MachineAllocationNetwork) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{18}
}

func (x *MachineAllocationNetwork) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *MachineAllocationNetwork) GetAutoAcquireIP() *wrappers.BoolValue {
	if x != nil {
		return x.AutoAcquireIP
	}
	return nil
}

type MachineDiskPartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label        string            `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`                                                                                                    // the partition label
	Device       string            `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`                                                                                                  // the partition device name, e.g. sda1
	Number       uint32            `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`                                                                                                 // the partition number
	MountPoint   string            `protobuf:"bytes,4,opt,name=mountPoint,proto3" json:"mountPoint,omitempty"`                                                                                          // the partition mount point
	MountOptions []string          `protobuf:"bytes,5,rep,name=mountOptions,proto3" json:"mountOptions,omitempty"`                                                                                      // the partition mount options
	Size         uint64            `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`                                                                                                     // the partition size
	Filesystem   string            `protobuf:"bytes,7,opt,name=filesystem,proto3" json:"filesystem,omitempty"`                                                                                          // the partition filesystem
	GptType      string            `protobuf:"bytes,8,opt,name=gptType,proto3" json:"gptType,omitempty"`                                                                                                // the partition GPT type
	GptGuid      string            `protobuf:"bytes,9,opt,name=gptGuid,proto3" json:"gptGuid,omitempty"`                                                                                                // the partition GPT guid
	Properties   map[string]string `protobuf:"bytes,10,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // the partition properties
	ContainsOS   bool              `protobuf:"varint,11,opt,name=containsOS,proto3" json:"containsOS,omitempty"`                                                                                        // whether the OS is installed on this partition or not
}

func (x *MachineDiskPartition) Reset() {
	*x = MachineDiskPartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineDiskPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineDiskPartition) ProtoMessage() {}

func (x *MachineDiskPartition) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineDiskPartition.ProtoReflect.Descriptor instead.
func (*MachineDiskPartition) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{19}
}

func (x *MachineDiskPartition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *MachineDiskPartition) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *MachineDiskPartition) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *MachineDiskPartition) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

func (x *MachineDiskPartition) GetMountOptions() []string {
	if x != nil {
		return x.MountOptions
	}
	return nil
}

func (x *MachineDiskPartition) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MachineDiskPartition) GetFilesystem() string {
	if x != nil {
		return x.Filesystem
	}
	return ""
}

func (x *MachineDiskPartition) GetGptType() string {
	if x != nil {
		return x.GptType
	}
	return ""
}

func (x *MachineDiskPartition) GetGptGuid() string {
	if x != nil {
		return x.GptGuid
	}
	return ""
}

func (x *MachineDiskPartition) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *MachineDiskPartition) GetContainsOS() bool {
	if x != nil {
		return x.ContainsOS
	}
	return false
}

type MachineFinalizeAllocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsolePassword string        `protobuf:"bytes,1,opt,name=ConsolePassword,proto3" json:"ConsolePassword,omitempty"` // the console password which was generated while provisioning
	Setup           *MachineSetup `protobuf:"bytes,2,opt,name=setup,proto3" json:"setup,omitempty"`                     // the machine setup
}

func (x *MachineFinalizeAllocationRequest) Reset() {
	*x = MachineFinalizeAllocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineFinalizeAllocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineFinalizeAllocationRequest) ProtoMessage() {}

func (x *MachineFinalizeAllocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineFinalizeAllocationRequest.ProtoReflect.Descriptor instead.
func (*MachineFinalizeAllocationRequest) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{20}
}

func (x *MachineFinalizeAllocationRequest) GetConsolePassword() string {
	if x != nil {
		return x.ConsolePassword
	}
	return ""
}

func (x *MachineFinalizeAllocationRequest) GetSetup() *MachineSetup {
	if x != nil {
		return x.Setup
	}
	return nil
}

// MachineSearchQuery can be used to search machines.
type MachineSearchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *wrappers.StringValue   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        *wrappers.StringValue   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PartitionID *wrappers.StringValue   `protobuf:"bytes,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	SizeID      *wrappers.StringValue   `protobuf:"bytes,4,opt,name=sizeID,proto3" json:"sizeID,omitempty"`
	RackID      *wrappers.StringValue   `protobuf:"bytes,5,opt,name=rackID,proto3" json:"rackID,omitempty"`
	Liveliness  *wrappers.StringValue   `protobuf:"bytes,6,opt,name=liveliness,proto3" json:"liveliness,omitempty"`
	Tags        []*wrappers.StringValue `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// allocation
	AllocationName      *wrappers.StringValue `protobuf:"bytes,12,opt,name=allocationName,proto3" json:"allocationName,omitempty"`
	AllocationProject   *wrappers.StringValue `protobuf:"bytes,13,opt,name=allocationProject,proto3" json:"allocationProject,omitempty"`
	AllocationImageID   *wrappers.StringValue `protobuf:"bytes,14,opt,name=allocationImageID,proto3" json:"allocationImageID,omitempty"`
	AllocationHostname  *wrappers.StringValue `protobuf:"bytes,15,opt,name=allocationHostname,proto3" json:"allocationHostname,omitempty"`
	AllocationSucceeded *wrappers.BoolValue   `protobuf:"bytes,16,opt,name=allocationSucceeded,proto3" json:"allocationSucceeded,omitempty"`
	// network
	NetworkIDs                 []*wrappers.StringValue `protobuf:"bytes,21,rep,name=networkIDs,proto3" json:"networkIDs,omitempty"`
	NetworkPrefixes            []*wrappers.StringValue `protobuf:"bytes,22,rep,name=networkPrefixes,proto3" json:"networkPrefixes,omitempty"`
	NetworkIPs                 []*wrappers.StringValue `protobuf:"bytes,23,rep,name=networkIPs,proto3" json:"networkIPs,omitempty"`
	NetworkDestinationPrefixes []*wrappers.StringValue `protobuf:"bytes,24,rep,name=networkDestinationPrefixes,proto3" json:"networkDestinationPrefixes,omitempty"`
	NetworkVrfs                []*wrappers.Int64Value  `protobuf:"bytes,25,rep,name=networkVrfs,proto3" json:"networkVrfs,omitempty"`
	NetworkPrivate             *wrappers.BoolValue     `protobuf:"bytes,26,opt,name=networkPrivate,proto3" json:"networkPrivate,omitempty"`
	NetworkASNs                []*wrappers.Int64Value  `protobuf:"bytes,27,rep,name=networkASNs,proto3" json:"networkASNs,omitempty"`
	NetworkNat                 *wrappers.BoolValue     `protobuf:"bytes,28,opt,name=networkNat,proto3" json:"networkNat,omitempty"`
	NetworkUnderlay            *wrappers.BoolValue     `protobuf:"bytes,29,opt,name=networkUnderlay,proto3" json:"networkUnderlay,omitempty"`
	// hardware
	HardwareMemory   *wrappers.Int64Value `protobuf:"bytes,34,opt,name=hardwareMemory,proto3" json:"hardwareMemory,omitempty"`
	HardwareCPUCores *wrappers.Int64Value `protobuf:"bytes,35,opt,name=hardwareCPUCores,proto3" json:"hardwareCPUCores,omitempty"`
	// nics
	NicsMacAddresses         []*wrappers.StringValue `protobuf:"bytes,40,rep,name=nicsMacAddresses,proto3" json:"nicsMacAddresses,omitempty"`
	NicsNames                []*wrappers.StringValue `protobuf:"bytes,41,rep,name=nicsNames,proto3" json:"nicsNames,omitempty"`
	NicsVrfs                 []*wrappers.StringValue `protobuf:"bytes,42,rep,name=nicsVrfs,proto3" json:"nicsVrfs,omitempty"`
	NicsNeighborMacAddresses []*wrappers.StringValue `protobuf:"bytes,43,rep,name=nicsNeighborMacAddresses,proto3" json:"nicsNeighborMacAddresses,omitempty"`
	NicsNeighborNames        []*wrappers.StringValue `protobuf:"bytes,44,rep,name=nicsNeighborNames,proto3" json:"nicsNeighborNames,omitempty"`
	NicsNeighborVrfs         []*wrappers.StringValue `protobuf:"bytes,45,rep,name=nicsNeighborVrfs,proto3" json:"nicsNeighborVrfs,omitempty"`
	// disks
	DiskNames []*wrappers.StringValue `protobuf:"bytes,50,rep,name=diskNames,proto3" json:"diskNames,omitempty"`
	DiskSizes []*wrappers.Int64Value  `protobuf:"bytes,51,rep,name=diskSizes,proto3" json:"diskSizes,omitempty"`
	// state
	StateValue *wrappers.StringValue `protobuf:"bytes,56,opt,name=stateValue,proto3" json:"stateValue,omitempty"`
	// ipmi
	IpmiAddress    *wrappers.StringValue `protobuf:"bytes,61,opt,name=ipmiAddress,proto3" json:"ipmiAddress,omitempty"`
	IpmiMacAddress *wrappers.StringValue `protobuf:"bytes,62,opt,name=ipmiMacAddress,proto3" json:"ipmiMacAddress,omitempty"`
	IpmiUser       *wrappers.StringValue `protobuf:"bytes,63,opt,name=ipmiUser,proto3" json:"ipmiUser,omitempty"`
	IpmiInterface  *wrappers.StringValue `protobuf:"bytes,64,opt,name=ipmiInterface,proto3" json:"ipmiInterface,omitempty"`
	// fru
	FruChassisPartNumber   *wrappers.StringValue `protobuf:"bytes,69,opt,name=fruChassisPartNumber,proto3" json:"fruChassisPartNumber,omitempty"`
	FruChassisPartSerial   *wrappers.StringValue `protobuf:"bytes,70,opt,name=fruChassisPartSerial,proto3" json:"fruChassisPartSerial,omitempty"`
	FruBoardMfg            *wrappers.StringValue `protobuf:"bytes,71,opt,name=fruBoardMfg,proto3" json:"fruBoardMfg,omitempty"`
	FruBoardMfgSerial      *wrappers.StringValue `protobuf:"bytes,72,opt,name=fruBoardMfgSerial,proto3" json:"fruBoardMfgSerial,omitempty"`
	FruBoardPartNumber     *wrappers.StringValue `protobuf:"bytes,73,opt,name=fruBoardPartNumber,proto3" json:"fruBoardPartNumber,omitempty"`
	FruProductManufacturer *wrappers.StringValue `protobuf:"bytes,74,opt,name=fruProductManufacturer,proto3" json:"fruProductManufacturer,omitempty"`
	FruProductPartNumber   *wrappers.StringValue `protobuf:"bytes,75,opt,name=fruProductPartNumber,proto3" json:"fruProductPartNumber,omitempty"`
	FruProductSerial       *wrappers.StringValue `protobuf:"bytes,76,opt,name=fruProductSerial,proto3" json:"fruProductSerial,omitempty"`
}

func (x *MachineSearchQuery) Reset() {
	*x = MachineSearchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineSearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineSearchQuery) ProtoMessage() {}

func (x *MachineSearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineSearchQuery.ProtoReflect.Descriptor instead.
func (*MachineSearchQuery) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{21}
}

func (x *MachineSearchQuery) GetID() *wrappers.StringValue {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *MachineSearchQuery) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MachineSearchQuery) GetPartitionID() *wrappers.StringValue {
	if x != nil {
		return x.PartitionID
	}
	return nil
}

func (x *MachineSearchQuery) GetSizeID() *wrappers.StringValue {
	if x != nil {
		return x.SizeID
	}
	return nil
}

func (x *MachineSearchQuery) GetRackID() *wrappers.StringValue {
	if x != nil {
		return x.RackID
	}
	return nil
}

func (x *MachineSearchQuery) GetLiveliness() *wrappers.StringValue {
	if x != nil {
		return x.Liveliness
	}
	return nil
}

func (x *MachineSearchQuery) GetTags() []*wrappers.StringValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MachineSearchQuery) GetAllocationName() *wrappers.StringValue {
	if x != nil {
		return x.AllocationName
	}
	return nil
}

func (x *MachineSearchQuery) GetAllocationProject() *wrappers.StringValue {
	if x != nil {
		return x.AllocationProject
	}
	return nil
}

func (x *MachineSearchQuery) GetAllocationImageID() *wrappers.StringValue {
	if x != nil {
		return x.AllocationImageID
	}
	return nil
}

func (x *MachineSearchQuery) GetAllocationHostname() *wrappers.StringValue {
	if x != nil {
		return x.AllocationHostname
	}
	return nil
}

func (x *MachineSearchQuery) GetAllocationSucceeded() *wrappers.BoolValue {
	if x != nil {
		return x.AllocationSucceeded
	}
	return nil
}

func (x *MachineSearchQuery) GetNetworkIDs() []*wrappers.StringValue {
	if x != nil {
		return x.NetworkIDs
	}
	return nil
}

func (x *MachineSearchQuery) GetNetworkPrefixes() []*wrappers.StringValue {
	if x != nil {
		return x.NetworkPrefixes
	}
	return nil
}

func (x *MachineSearchQuery) GetNetworkIPs() []*wrappers.StringValue {
	if x != nil {
		return x.NetworkIPs
	}
	return nil
}

func (x *MachineSearchQuery) GetNetworkDestinationPrefixes() []*wrappers.StringValue {
	if x != nil {
		return x.NetworkDestinationPrefixes
	}
	return nil
}

func (x *MachineSearchQuery) GetNetworkVrfs() []*wrappers.Int64Value {
	if x != nil {
		return x.NetworkVrfs
	}
	return nil
}

func (x *MachineSearchQuery) GetNetworkPrivate() *wrappers.BoolValue {
	if x != nil {
		return x.NetworkPrivate
	}
	return nil
}

func (x *MachineSearchQuery) GetNetworkASNs() []*wrappers.Int64Value {
	if x != nil {
		return x.NetworkASNs
	}
	return nil
}

func (x *MachineSearchQuery) GetNetworkNat() *wrappers.BoolValue {
	if x != nil {
		return x.NetworkNat
	}
	return nil
}

func (x *MachineSearchQuery) GetNetworkUnderlay() *wrappers.BoolValue {
	if x != nil {
		return x.NetworkUnderlay
	}
	return nil
}

func (x *MachineSearchQuery) GetHardwareMemory() *wrappers.Int64Value {
	if x != nil {
		return x.HardwareMemory
	}
	return nil
}

func (x *MachineSearchQuery) GetHardwareCPUCores() *wrappers.Int64Value {
	if x != nil {
		return x.HardwareCPUCores
	}
	return nil
}

func (x *MachineSearchQuery) GetNicsMacAddresses() []*wrappers.StringValue {
	if x != nil {
		return x.NicsMacAddresses
	}
	return nil
}

func (x *MachineSearchQuery) GetNicsNames() []*wrappers.StringValue {
	if x != nil {
		return x.NicsNames
	}
	return nil
}

func (x *MachineSearchQuery) GetNicsVrfs() []*wrappers.StringValue {
	if x != nil {
		return x.NicsVrfs
	}
	return nil
}

func (x *MachineSearchQuery) GetNicsNeighborMacAddresses() []*wrappers.StringValue {
	if x != nil {
		return x.NicsNeighborMacAddresses
	}
	return nil
}

func (x *MachineSearchQuery) GetNicsNeighborNames() []*wrappers.StringValue {
	if x != nil {
		return x.NicsNeighborNames
	}
	return nil
}

func (x *MachineSearchQuery) GetNicsNeighborVrfs() []*wrappers.StringValue {
	if x != nil {
		return x.NicsNeighborVrfs
	}
	return nil
}

func (x *MachineSearchQuery) GetDiskNames() []*wrappers.StringValue {
	if x != nil {
		return x.DiskNames
	}
	return nil
}

func (x *MachineSearchQuery) GetDiskSizes() []*wrappers.Int64Value {
	if x != nil {
		return x.DiskSizes
	}
	return nil
}

func (x *MachineSearchQuery) GetStateValue() *wrappers.StringValue {
	if x != nil {
		return x.StateValue
	}
	return nil
}

func (x *MachineSearchQuery) GetIpmiAddress() *wrappers.StringValue {
	if x != nil {
		return x.IpmiAddress
	}
	return nil
}

func (x *MachineSearchQuery) GetIpmiMacAddress() *wrappers.StringValue {
	if x != nil {
		return x.IpmiMacAddress
	}
	return nil
}

func (x *MachineSearchQuery) GetIpmiUser() *wrappers.StringValue {
	if x != nil {
		return x.IpmiUser
	}
	return nil
}

func (x *MachineSearchQuery) GetIpmiInterface() *wrappers.StringValue {
	if x != nil {
		return x.IpmiInterface
	}
	return nil
}

func (x *MachineSearchQuery) GetFruChassisPartNumber() *wrappers.StringValue {
	if x != nil {
		return x.FruChassisPartNumber
	}
	return nil
}

func (x *MachineSearchQuery) GetFruChassisPartSerial() *wrappers.StringValue {
	if x != nil {
		return x.FruChassisPartSerial
	}
	return nil
}

func (x *MachineSearchQuery) GetFruBoardMfg() *wrappers.StringValue {
	if x != nil {
		return x.FruBoardMfg
	}
	return nil
}

func (x *MachineSearchQuery) GetFruBoardMfgSerial() *wrappers.StringValue {
	if x != nil {
		return x.FruBoardMfgSerial
	}
	return nil
}

func (x *MachineSearchQuery) GetFruBoardPartNumber() *wrappers.StringValue {
	if x != nil {
		return x.FruBoardPartNumber
	}
	return nil
}

func (x *MachineSearchQuery) GetFruProductManufacturer() *wrappers.StringValue {
	if x != nil {
		return x.FruProductManufacturer
	}
	return nil
}

func (x *MachineSearchQuery) GetFruProductPartNumber() *wrappers.StringValue {
	if x != nil {
		return x.FruProductPartNumber
	}
	return nil
}

func (x *MachineSearchQuery) GetFruProductSerial() *wrappers.StringValue {
	if x != nil {
		return x.FruProductSerial
	}
	return nil
}

type MachineIPMIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common  *Common      `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Machine *Machine     `protobuf:"bytes,2,opt,name=machine,proto3" json:"machine,omitempty"`
	IPMI    *MachineIPMI `protobuf:"bytes,3,opt,name=IPMI,proto3" json:"IPMI,omitempty"` // ipmi information of this machine
}

func (x *MachineIPMIResponse) Reset() {
	*x = MachineIPMIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineIPMIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineIPMIResponse) ProtoMessage() {}

func (x *MachineIPMIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineIPMIResponse.ProtoReflect.Descriptor instead.
func (*MachineIPMIResponse) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{22}
}

func (x *MachineIPMIResponse) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *MachineIPMIResponse) GetMachine() *Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

func (x *MachineIPMIResponse) GetIPMI() *MachineIPMI {
	if x != nil {
		return x.IPMI
	}
	return nil
}

type MachineIpmiReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionID  string            `protobuf:"bytes,1,opt,name=PartitionID,proto3" json:"PartitionID,omitempty"`                                                                                           // the partition id for the ipmi report
	ActiveLeases map[string]string `protobuf:"bytes,2,rep,name=activeLeases,proto3" json:"activeLeases,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // the active leases to be reported by a management server
}

func (x *MachineIpmiReport) Reset() {
	*x = MachineIpmiReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineIpmiReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineIpmiReport) ProtoMessage() {}

func (x *MachineIpmiReport) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineIpmiReport.ProtoReflect.Descriptor instead.
func (*MachineIpmiReport) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{23}
}

func (x *MachineIpmiReport) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *MachineIpmiReport) GetActiveLeases() map[string]string {
	if x != nil {
		return x.ActiveLeases
	}
	return nil
}

type MachineIpmiReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedLeases map[string]string `protobuf:"bytes,1,rep,name=updatedLeases,proto3" json:"updatedLeases,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // the leases that triggered an update of ipmi data
	CreatedLeases map[string]string `protobuf:"bytes,2,rep,name=createdLeases,proto3" json:"createdLeases,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // the leases that triggered a creation of a machine entity
}

func (x *MachineIpmiReportResponse) Reset() {
	*x = MachineIpmiReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineIpmiReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineIpmiReportResponse) ProtoMessage() {}

func (x *MachineIpmiReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineIpmiReportResponse.ProtoReflect.Descriptor instead.
func (*MachineIpmiReportResponse) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{24}
}

func (x *MachineIpmiReportResponse) GetUpdatedLeases() map[string]string {
	if x != nil {
		return x.UpdatedLeases
	}
	return nil
}

func (x *MachineIpmiReportResponse) GetCreatedLeases() map[string]string {
	if x != nil {
		return x.CreatedLeases
	}
	return nil
}

type MachineReinstallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common  *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	ImageID string  `protobuf:"bytes,2,opt,name=imageID,proto3" json:"imageID,omitempty"` // the image id to be installed
}

func (x *MachineReinstallRequest) Reset() {
	*x = MachineReinstallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineReinstallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineReinstallRequest) ProtoMessage() {}

func (x *MachineReinstallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineReinstallRequest.ProtoReflect.Descriptor instead.
func (*MachineReinstallRequest) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{25}
}

func (x *MachineReinstallRequest) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *MachineReinstallRequest) GetImageID() string {
	if x != nil {
		return x.ImageID
	}
	return ""
}

type MachineNic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress string `protobuf:"bytes,1,opt,name=macAddress,proto3" json:"macAddress,omitempty"` // the mac address of this network interface
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`             // the name of this network interface
}

func (x *MachineNic) Reset() {
	*x = MachineNic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineNic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineNic) ProtoMessage() {}

func (x *MachineNic) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineNic.ProtoReflect.Descriptor instead.
func (*MachineNic) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{26}
}

func (x *MachineNic) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *MachineNic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MachineNicExtended struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineNic *MachineNic           `protobuf:"bytes,1,opt,name=machineNic,proto3" json:"machineNic,omitempty"`
	Neighbors  []*MachineNicExtended `protobuf:"bytes,2,rep,name=neighbors,proto3" json:"neighbors,omitempty"` // the neighbors visible to this network interface
}

func (x *MachineNicExtended) Reset() {
	*x = MachineNicExtended{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineNicExtended) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineNicExtended) ProtoMessage() {}

func (x *MachineNicExtended) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineNicExtended.ProtoReflect.Descriptor instead.
func (*MachineNicExtended) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{27}
}

func (x *MachineNicExtended) GetMachineNic() *MachineNic {
	if x != nil {
		return x.MachineNic
	}
	return nil
}

func (x *MachineNicExtended) GetNeighbors() []*MachineNicExtended {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

// A machine representing a bare metal machine
type Machine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common                   *Common                          `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Partition                *PartitionResponse               `protobuf:"bytes,2,opt,name=partition,proto3" json:"partition,omitempty"`                                // the partition assigned to this machine //TODO readonly
	RackID                   string                           `protobuf:"bytes,3,opt,name=rackID,proto3" json:"rackID,omitempty"`                                      // the rack assigned to this machine //TODO readonly
	Size                     *SizeResponse                    `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`                                          // the size of this machine //TODO readonly
	Hardware                 *MachineHardware                 `protobuf:"bytes,5,opt,name=hardware,proto3" json:"hardware,omitempty"`                                  // the hardware of this machine
	BIOS                     *MachineBIOS                     `protobuf:"bytes,6,opt,name=BIOS,proto3" json:"BIOS,omitempty"`                                          // bios information of this machine
	Allocation               *MachineAllocation               `protobuf:"bytes,7,opt,name=allocation,proto3" json:"allocation,omitempty"`                              // the allocation data of an allocated machine
	State                    *MachineState                    `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`                                        // the state of this machine
	LedState                 *ChassisIdentifyLEDState         `protobuf:"bytes,9,opt,name=ledState,proto3" json:"ledState,omitempty"`                                  // the state of this chassis identify LED
	Liveliness               string                           `protobuf:"bytes,10,opt,name=liveliness,proto3" json:"liveliness,omitempty"`                             // the liveliness of this machine
	RecentProvisioningEvents *MachineRecentProvisioningEvents `protobuf:"bytes,11,opt,name=recentProvisioningEvents,proto3" json:"recentProvisioningEvents,omitempty"` // recent events of this machine during provisioning
	Tags                     []*wrappers.StringValue          `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`                                         // the tags for this machine
}

func (x *Machine) Reset() {
	*x = Machine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine) ProtoMessage() {}

func (x *Machine) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine.ProtoReflect.Descriptor instead.
func (*Machine) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{28}
}

func (x *Machine) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *Machine) GetPartition() *PartitionResponse {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *Machine) GetRackID() string {
	if x != nil {
		return x.RackID
	}
	return ""
}

func (x *Machine) GetSize() *SizeResponse {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *Machine) GetHardware() *MachineHardware {
	if x != nil {
		return x.Hardware
	}
	return nil
}

func (x *Machine) GetBIOS() *MachineBIOS {
	if x != nil {
		return x.BIOS
	}
	return nil
}

func (x *Machine) GetAllocation() *MachineAllocation {
	if x != nil {
		return x.Allocation
	}
	return nil
}

func (x *Machine) GetState() *MachineState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Machine) GetLedState() *ChassisIdentifyLEDState {
	if x != nil {
		return x.LedState
	}
	return nil
}

func (x *Machine) GetLiveliness() string {
	if x != nil {
		return x.Liveliness
	}
	return ""
}

func (x *Machine) GetRecentProvisioningEvents() *MachineRecentProvisioningEvents {
	if x != nil {
		return x.RecentProvisioningEvents
	}
	return nil
}

func (x *Machine) GetTags() []*wrappers.StringValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

type MachineCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Machine *Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
}

func (x *MachineCreateRequest) Reset() {
	*x = MachineCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineCreateRequest) ProtoMessage() {}

func (x *MachineCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineCreateRequest.ProtoReflect.Descriptor instead.
func (*MachineCreateRequest) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{29}
}

func (x *MachineCreateRequest) GetMachine() *Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

type MachineUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Machine *Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
}

func (x *MachineUpdateRequest) Reset() {
	*x = MachineUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineUpdateRequest) ProtoMessage() {}

func (x *MachineUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineUpdateRequest.ProtoReflect.Descriptor instead.
func (*MachineUpdateRequest) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{30}
}

func (x *MachineUpdateRequest) GetMachine() *Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

type MachineDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifiable *Identifiable `protobuf:"bytes,1,opt,name=identifiable,proto3" json:"identifiable,omitempty"`
}

func (x *MachineDeleteRequest) Reset() {
	*x = MachineDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineDeleteRequest) ProtoMessage() {}

func (x *MachineDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineDeleteRequest.ProtoReflect.Descriptor instead.
func (*MachineDeleteRequest) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{31}
}

func (x *MachineDeleteRequest) GetIdentifiable() *Identifiable {
	if x != nil {
		return x.Identifiable
	}
	return nil
}

type MachineGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifiable *Identifiable `protobuf:"bytes,1,opt,name=identifiable,proto3" json:"identifiable,omitempty"`
}

func (x *MachineGetRequest) Reset() {
	*x = MachineGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineGetRequest) ProtoMessage() {}

func (x *MachineGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineGetRequest.ProtoReflect.Descriptor instead.
func (*MachineGetRequest) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{32}
}

func (x *MachineGetRequest) GetIdentifiable() *Identifiable {
	if x != nil {
		return x.Identifiable
	}
	return nil
}

type MachineFindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *MachineSearchQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *MachineFindRequest) Reset() {
	*x = MachineFindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineFindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineFindRequest) ProtoMessage() {}

func (x *MachineFindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineFindRequest.ProtoReflect.Descriptor instead.
func (*MachineFindRequest) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{33}
}

func (x *MachineFindRequest) GetQuery() *MachineSearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type MachineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common  *Common  `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Machine *Machine `protobuf:"bytes,2,opt,name=machine,proto3" json:"machine,omitempty"`
}

func (x *MachineResponse) Reset() {
	*x = MachineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineResponse) ProtoMessage() {}

func (x *MachineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineResponse.ProtoReflect.Descriptor instead.
func (*MachineResponse) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{34}
}

func (x *MachineResponse) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *MachineResponse) GetMachine() *Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

type MachineListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MachineListRequest) Reset() {
	*x = MachineListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineListRequest) ProtoMessage() {}

func (x *MachineListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineListRequest.ProtoReflect.Descriptor instead.
func (*MachineListRequest) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{35}
}

type MachineListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Machines []*Machine `protobuf:"bytes,1,rep,name=machines,proto3" json:"machines,omitempty"`
}

func (x *MachineListResponse) Reset() {
	*x = MachineListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_machine_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineListResponse) ProtoMessage() {}

func (x *MachineListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_machine_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineListResponse.ProtoReflect.Descriptor instead.
func (*MachineListResponse) Descriptor() ([]byte, []int) {
	return file_v1_machine_proto_rawDescGZIP(), []int{36}
}

func (x *MachineListResponse) GetMachines() []*Machine {
	if x != nil {
		return x.Machines
	}
	return nil
}

var File_v1_machine_proto protoreflect.FileDescriptor

var file_v1_machine_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x76, 0x31,
	0x2f, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x01, 0x0a,
	0x0c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x69, 0x74, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6e, 0x69, 0x74, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x62,
	0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x64, 0x0a, 0x10, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x05,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x22, 0xfa, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x50, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x49, 0x50, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x53, 0x4e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x41, 0x53, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6e, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x22, 0xd0, 0x04, 0x0a, 0x11, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x31, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x73, 0x68,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x65, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x09, 0x72, 0x65, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x22, 0x76, 0x0a, 0x0f, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x69, 0x63, 0x52, 0x04, 0x6e, 0x69, 0x63,
	0x73, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x69, 0x63, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x22, 0x46, 0x0a, 0x0c, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x45, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x42,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x1f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x98, 0x01, 0x0a,
	0x18, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x17, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x0b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x42,
	0x49, 0x4f, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x50, 0x4d, 0x49, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x03, 0x66, 0x72, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x46, 0x72, 0x75, 0x52, 0x03, 0x66, 0x72, 0x75, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x6d, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x6d, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x04,
	0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x46, 0x72, 0x75, 0x12, 0x4a, 0x0a, 0x11,
	0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x50, 0x61,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x08, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x66, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x66, 0x67, 0x12, 0x44,
	0x0a, 0x0e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x66, 0x67, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x66, 0x67, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xb9, 0x02, 0x0a,
	0x16, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x42, 0x49, 0x4f, 0x53,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x42, 0x49, 0x4f,
	0x53, 0x52, 0x04, 0x42, 0x49, 0x4f, 0x53, 0x12, 0x2d, 0x0a, 0x04, 0x49, 0x50, 0x4d, 0x49, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x50, 0x4d, 0x49,
	0x52, 0x04, 0x49, 0x50, 0x4d, 0x49, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xc2, 0x04, 0x0a, 0x16, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x69, 0x7a, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x38, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12,
	0x2e, 0x0a, 0x03, 0x49, 0x50, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x49, 0x50, 0x73, 0x12,
	0x3c, 0x0a, 0x0a, 0x53, 0x53, 0x48, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x63, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x53, 0x53, 0x48, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x7a, 0x0a,
	0x18, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x50, 0x22, 0xbb, 0x03, 0x0a, 0x14, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x70,
	0x74, 0x47, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x74,
	0x47, 0x75, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44,
	0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x4f, 0x53, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x4f, 0x53, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x52, 0x05, 0x73, 0x65, 0x74, 0x75, 0x70, 0x22, 0xd7, 0x17, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2c,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x69,
	0x7a, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x69,
	0x76, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6c, 0x69,
	0x76, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x44, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x44, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x50, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x50, 0x73, 0x12, 0x5c, 0x0a, 0x1a, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x56, 0x72, 0x66, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x56, 0x72, 0x66, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x41, 0x53, 0x4e, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x41, 0x53, 0x4e, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x61, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x47, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x50, 0x55, 0x43, 0x6f,
	0x72, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x43, 0x50, 0x55, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x6e, 0x69, 0x63, 0x73,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x6e, 0x69, 0x63, 0x73, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x73, 0x56, 0x72, 0x66, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x73, 0x56, 0x72, 0x66, 0x73, 0x12, 0x58, 0x0a, 0x18, 0x6e, 0x69, 0x63, 0x73,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x6e, 0x69, 0x63, 0x73, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x6e, 0x69, 0x63, 0x73, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6e, 0x69, 0x63,
	0x73, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x48,
	0x0a, 0x10, 0x6e, 0x69, 0x63, 0x73, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x56, 0x72,
	0x66, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6e, 0x69, 0x63, 0x73, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x56, 0x72, 0x66, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x69, 0x70, 0x6d, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x69, 0x70, 0x6d, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a,
	0x0e, 0x69, 0x70, 0x6d, 0x69, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x70, 0x6d, 0x69, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x69, 0x70, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x70, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x0d, 0x69, 0x70, 0x6d, 0x69, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x69, 0x70, 0x6d, 0x69, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x50, 0x0a, 0x14, 0x66, 0x72, 0x75, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x50,
	0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x66,
	0x72, 0x75, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x14, 0x66, 0x72, 0x75, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x50, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x66, 0x72, 0x75, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x72, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x4d, 0x66, 0x67, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x72, 0x75, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x4d, 0x66, 0x67, 0x12, 0x4a, 0x0a, 0x11, 0x66, 0x72, 0x75, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x4d, 0x66, 0x67, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x66, 0x72, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x66, 0x67, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x4c, 0x0a, 0x12, 0x66, 0x72, 0x75, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x66, 0x72, 0x75,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x54, 0x0a, 0x16, 0x66, 0x72, 0x75, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x66,
	0x72, 0x75, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x14, 0x66, 0x72, 0x75, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x4b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x14, 0x66, 0x72, 0x75, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x10, 0x66, 0x72, 0x75, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x66, 0x72, 0x75, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x50, 0x4d,
	0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52,
	0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x49, 0x50, 0x4d, 0x49,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x50, 0x4d,
	0x49, 0x52, 0x04, 0x49, 0x50, 0x4d, 0x49, 0x22, 0xcd, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x49, 0x70, 0x6d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x55, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x70, 0x6d, 0x69,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x02, 0x0a, 0x19, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x49, 0x70, 0x6d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x49, 0x70, 0x6d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x70, 0x6d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a,
	0x17, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x22, 0x40, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x69, 0x63, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x69,
	0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4e, 0x69, 0x63, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4e, 0x69, 0x63, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x69, 0x63,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x22, 0x9b, 0x05, 0x0a, 0x07, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x42, 0x49, 0x4f, 0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x42, 0x49, 0x4f, 0x53, 0x52, 0x04, 0x42, 0x49, 0x4f, 0x53, 0x12, 0x3f,
	0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x41, 0x0a, 0x08, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x79, 0x4c, 0x45, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x69, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x22, 0x47, 0x0a, 0x14, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0x47, 0x0a, 0x14, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x22, 0x56, 0x0a, 0x14, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x53, 0x0a, 0x11, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x4c, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x70,
	0x0a, 0x0f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x22, 0x14, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x32, 0xd8, 0x03, 0x0a, 0x0e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2e, 0x5a, 0x2c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2d,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_v1_machine_proto_rawDescOnce sync.Once
	file_v1_machine_proto_rawDescData = file_v1_machine_proto_rawDesc
)

func file_v1_machine_proto_rawDescGZIP() []byte {
	file_v1_machine_proto_rawDescOnce.Do(func() {
		file_v1_machine_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_machine_proto_rawDescData)
	})
	return file_v1_machine_proto_rawDescData
}

var file_v1_machine_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_v1_machine_proto_goTypes = []interface{}{
	(*MachineSetup)(nil),                     // 0: metal.api.v1.MachineSetup
	(*MachineReinstall)(nil),                 // 1: metal.api.v1.MachineReinstall
	(*MachineNetwork)(nil),                   // 2: metal.api.v1.MachineNetwork
	(*MachineAllocation)(nil),                // 3: metal.api.v1.MachineAllocation
	(*MachineHardwareBase)(nil),              // 4: metal.api.v1.MachineHardwareBase
	(*MachineHardware)(nil),                  // 5: metal.api.v1.MachineHardware
	(*MachineHardwareExtended)(nil),          // 6: metal.api.v1.MachineHardwareExtended
	(*MachineState)(nil),                     // 7: metal.api.v1.MachineState
	(*ChassisIdentifyLEDState)(nil),          // 8: metal.api.v1.ChassisIdentifyLEDState
	(*MachineBlockDevice)(nil),               // 9: metal.api.v1.MachineBlockDevice
	(*MachineRecentProvisioningEvents)(nil),  // 10: metal.api.v1.MachineRecentProvisioningEvents
	(*MachineProvisioningEvent)(nil),         // 11: metal.api.v1.MachineProvisioningEvent
	(*MachineLivelinessReport)(nil),          // 12: metal.api.v1.MachineLivelinessReport
	(*MachineBIOS)(nil),                      // 13: metal.api.v1.MachineBIOS
	(*MachineIPMI)(nil),                      // 14: metal.api.v1.MachineIPMI
	(*MachineFru)(nil),                       // 15: metal.api.v1.MachineFru
	(*MachineRegisterRequest)(nil),           // 16: metal.api.v1.MachineRegisterRequest
	(*MachineAllocateRequest)(nil),           // 17: metal.api.v1.MachineAllocateRequest
	(*MachineAllocationNetwork)(nil),         // 18: metal.api.v1.MachineAllocationNetwork
	(*MachineDiskPartition)(nil),             // 19: metal.api.v1.MachineDiskPartition
	(*MachineFinalizeAllocationRequest)(nil), // 20: metal.api.v1.MachineFinalizeAllocationRequest
	(*MachineSearchQuery)(nil),               // 21: metal.api.v1.MachineSearchQuery
	(*MachineIPMIResponse)(nil),              // 22: metal.api.v1.MachineIPMIResponse
	(*MachineIpmiReport)(nil),                // 23: metal.api.v1.MachineIpmiReport
	(*MachineIpmiReportResponse)(nil),        // 24: metal.api.v1.MachineIpmiReportResponse
	(*MachineReinstallRequest)(nil),          // 25: metal.api.v1.MachineReinstallRequest
	(*MachineNic)(nil),                       // 26: metal.api.v1.MachineNic
	(*MachineNicExtended)(nil),               // 27: metal.api.v1.MachineNicExtended
	(*Machine)(nil),                          // 28: metal.api.v1.Machine
	(*MachineCreateRequest)(nil),             // 29: metal.api.v1.MachineCreateRequest
	(*MachineUpdateRequest)(nil),             // 30: metal.api.v1.MachineUpdateRequest
	(*MachineDeleteRequest)(nil),             // 31: metal.api.v1.MachineDeleteRequest
	(*MachineGetRequest)(nil),                // 32: metal.api.v1.MachineGetRequest
	(*MachineFindRequest)(nil),               // 33: metal.api.v1.MachineFindRequest
	(*MachineResponse)(nil),                  // 34: metal.api.v1.MachineResponse
	(*MachineListRequest)(nil),               // 35: metal.api.v1.MachineListRequest
	(*MachineListResponse)(nil),              // 36: metal.api.v1.MachineListResponse
	nil,                                      // 37: metal.api.v1.MachineDiskPartition.PropertiesEntry
	nil,                                      // 38: metal.api.v1.MachineIpmiReport.ActiveLeasesEntry
	nil,                                      // 39: metal.api.v1.MachineIpmiReportResponse.UpdatedLeasesEntry
	nil,                                      // 40: metal.api.v1.MachineIpmiReportResponse.CreatedLeasesEntry
	(*timestamp.Timestamp)(nil),              // 41: google.protobuf.Timestamp
	(*wrappers.StringValue)(nil),             // 42: google.protobuf.StringValue
	(*ImageResponse)(nil),                    // 43: metal.api.v1.ImageResponse
	(*Common)(nil),                           // 44: metal.api.v1.Common
	(*wrappers.BoolValue)(nil),               // 45: google.protobuf.BoolValue
	(*wrappers.Int64Value)(nil),              // 46: google.protobuf.Int64Value
	(*PartitionResponse)(nil),                // 47: metal.api.v1.PartitionResponse
	(*SizeResponse)(nil),                     // 48: metal.api.v1.SizeResponse
	(*Identifiable)(nil),                     // 49: metal.api.v1.Identifiable
}
var file_v1_machine_proto_depIdxs = []int32{
	0,   // 0: metal.api.v1.MachineReinstall.setup:type_name -> metal.api.v1.MachineSetup
	41,  // 1: metal.api.v1.MachineAllocation.Created:type_name -> google.protobuf.Timestamp
	42,  // 2: metal.api.v1.MachineAllocation.description:type_name -> google.protobuf.StringValue
	43,  // 3: metal.api.v1.MachineAllocation.image:type_name -> metal.api.v1.ImageResponse
	2,   // 4: metal.api.v1.MachineAllocation.machineNetworks:type_name -> metal.api.v1.MachineNetwork
	42,  // 5: metal.api.v1.MachineAllocation.userData:type_name -> google.protobuf.StringValue
	42,  // 6: metal.api.v1.MachineAllocation.consolePassword:type_name -> google.protobuf.StringValue
	1,   // 7: metal.api.v1.MachineAllocation.reinstall:type_name -> metal.api.v1.MachineReinstall
	9,   // 8: metal.api.v1.MachineHardwareBase.disks:type_name -> metal.api.v1.MachineBlockDevice
	4,   // 9: metal.api.v1.MachineHardware.base:type_name -> metal.api.v1.MachineHardwareBase
	26,  // 10: metal.api.v1.MachineHardware.nics:type_name -> metal.api.v1.MachineNic
	4,   // 11: metal.api.v1.MachineHardwareExtended.base:type_name -> metal.api.v1.MachineHardwareBase
	27,  // 12: metal.api.v1.MachineHardwareExtended.nics:type_name -> metal.api.v1.MachineNicExtended
	19,  // 13: metal.api.v1.MachineBlockDevice.partitions:type_name -> metal.api.v1.MachineDiskPartition
	11,  // 14: metal.api.v1.MachineRecentProvisioningEvents.events:type_name -> metal.api.v1.MachineProvisioningEvent
	41,  // 15: metal.api.v1.MachineRecentProvisioningEvents.lastEventTime:type_name -> google.protobuf.Timestamp
	41,  // 16: metal.api.v1.MachineProvisioningEvent.time:type_name -> google.protobuf.Timestamp
	42,  // 17: metal.api.v1.MachineProvisioningEvent.message:type_name -> google.protobuf.StringValue
	15,  // 18: metal.api.v1.MachineIPMI.fru:type_name -> metal.api.v1.MachineFru
	42,  // 19: metal.api.v1.MachineFru.chassisPartNumber:type_name -> google.protobuf.StringValue
	42,  // 20: metal.api.v1.MachineFru.chassisPartSerial:type_name -> google.protobuf.StringValue
	42,  // 21: metal.api.v1.MachineFru.boardMfg:type_name -> google.protobuf.StringValue
	42,  // 22: metal.api.v1.MachineFru.boardMfgSerial:type_name -> google.protobuf.StringValue
	42,  // 23: metal.api.v1.MachineFru.boardPartNumber:type_name -> google.protobuf.StringValue
	42,  // 24: metal.api.v1.MachineFru.productManufacturer:type_name -> google.protobuf.StringValue
	42,  // 25: metal.api.v1.MachineFru.productPartNumber:type_name -> google.protobuf.StringValue
	42,  // 26: metal.api.v1.MachineFru.productSerial:type_name -> google.protobuf.StringValue
	6,   // 27: metal.api.v1.MachineRegisterRequest.hardware:type_name -> metal.api.v1.MachineHardwareExtended
	13,  // 28: metal.api.v1.MachineRegisterRequest.BIOS:type_name -> metal.api.v1.MachineBIOS
	14,  // 29: metal.api.v1.MachineRegisterRequest.IPMI:type_name -> metal.api.v1.MachineIPMI
	42,  // 30: metal.api.v1.MachineRegisterRequest.tags:type_name -> google.protobuf.StringValue
	44,  // 31: metal.api.v1.MachineAllocateRequest.common:type_name -> metal.api.v1.Common
	42,  // 32: metal.api.v1.MachineAllocateRequest.UUID:type_name -> google.protobuf.StringValue
	42,  // 33: metal.api.v1.MachineAllocateRequest.Hostname:type_name -> google.protobuf.StringValue
	42,  // 34: metal.api.v1.MachineAllocateRequest.UserData:type_name -> google.protobuf.StringValue
	42,  // 35: metal.api.v1.MachineAllocateRequest.Tags:type_name -> google.protobuf.StringValue
	18,  // 36: metal.api.v1.MachineAllocateRequest.networks:type_name -> metal.api.v1.MachineAllocationNetwork
	42,  // 37: metal.api.v1.MachineAllocateRequest.IPs:type_name -> google.protobuf.StringValue
	42,  // 38: metal.api.v1.MachineAllocateRequest.SSHPubKeys:type_name -> google.protobuf.StringValue
	45,  // 39: metal.api.v1.MachineAllocationNetwork.autoAcquireIP:type_name -> google.protobuf.BoolValue
	37,  // 40: metal.api.v1.MachineDiskPartition.properties:type_name -> metal.api.v1.MachineDiskPartition.PropertiesEntry
	0,   // 41: metal.api.v1.MachineFinalizeAllocationRequest.setup:type_name -> metal.api.v1.MachineSetup
	42,  // 42: metal.api.v1.MachineSearchQuery.ID:type_name -> google.protobuf.StringValue
	42,  // 43: metal.api.v1.MachineSearchQuery.name:type_name -> google.protobuf.StringValue
	42,  // 44: metal.api.v1.MachineSearchQuery.partitionID:type_name -> google.protobuf.StringValue
	42,  // 45: metal.api.v1.MachineSearchQuery.sizeID:type_name -> google.protobuf.StringValue
	42,  // 46: metal.api.v1.MachineSearchQuery.rackID:type_name -> google.protobuf.StringValue
	42,  // 47: metal.api.v1.MachineSearchQuery.liveliness:type_name -> google.protobuf.StringValue
	42,  // 48: metal.api.v1.MachineSearchQuery.tags:type_name -> google.protobuf.StringValue
	42,  // 49: metal.api.v1.MachineSearchQuery.allocationName:type_name -> google.protobuf.StringValue
	42,  // 50: metal.api.v1.MachineSearchQuery.allocationProject:type_name -> google.protobuf.StringValue
	42,  // 51: metal.api.v1.MachineSearchQuery.allocationImageID:type_name -> google.protobuf.StringValue
	42,  // 52: metal.api.v1.MachineSearchQuery.allocationHostname:type_name -> google.protobuf.StringValue
	45,  // 53: metal.api.v1.MachineSearchQuery.allocationSucceeded:type_name -> google.protobuf.BoolValue
	42,  // 54: metal.api.v1.MachineSearchQuery.networkIDs:type_name -> google.protobuf.StringValue
	42,  // 55: metal.api.v1.MachineSearchQuery.networkPrefixes:type_name -> google.protobuf.StringValue
	42,  // 56: metal.api.v1.MachineSearchQuery.networkIPs:type_name -> google.protobuf.StringValue
	42,  // 57: metal.api.v1.MachineSearchQuery.networkDestinationPrefixes:type_name -> google.protobuf.StringValue
	46,  // 58: metal.api.v1.MachineSearchQuery.networkVrfs:type_name -> google.protobuf.Int64Value
	45,  // 59: metal.api.v1.MachineSearchQuery.networkPrivate:type_name -> google.protobuf.BoolValue
	46,  // 60: metal.api.v1.MachineSearchQuery.networkASNs:type_name -> google.protobuf.Int64Value
	45,  // 61: metal.api.v1.MachineSearchQuery.networkNat:type_name -> google.protobuf.BoolValue
	45,  // 62: metal.api.v1.MachineSearchQuery.networkUnderlay:type_name -> google.protobuf.BoolValue
	46,  // 63: metal.api.v1.MachineSearchQuery.hardwareMemory:type_name -> google.protobuf.Int64Value
	46,  // 64: metal.api.v1.MachineSearchQuery.hardwareCPUCores:type_name -> google.protobuf.Int64Value
	42,  // 65: metal.api.v1.MachineSearchQuery.nicsMacAddresses:type_name -> google.protobuf.StringValue
	42,  // 66: metal.api.v1.MachineSearchQuery.nicsNames:type_name -> google.protobuf.StringValue
	42,  // 67: metal.api.v1.MachineSearchQuery.nicsVrfs:type_name -> google.protobuf.StringValue
	42,  // 68: metal.api.v1.MachineSearchQuery.nicsNeighborMacAddresses:type_name -> google.protobuf.StringValue
	42,  // 69: metal.api.v1.MachineSearchQuery.nicsNeighborNames:type_name -> google.protobuf.StringValue
	42,  // 70: metal.api.v1.MachineSearchQuery.nicsNeighborVrfs:type_name -> google.protobuf.StringValue
	42,  // 71: metal.api.v1.MachineSearchQuery.diskNames:type_name -> google.protobuf.StringValue
	46,  // 72: metal.api.v1.MachineSearchQuery.diskSizes:type_name -> google.protobuf.Int64Value
	42,  // 73: metal.api.v1.MachineSearchQuery.stateValue:type_name -> google.protobuf.StringValue
	42,  // 74: metal.api.v1.MachineSearchQuery.ipmiAddress:type_name -> google.protobuf.StringValue
	42,  // 75: metal.api.v1.MachineSearchQuery.ipmiMacAddress:type_name -> google.protobuf.StringValue
	42,  // 76: metal.api.v1.MachineSearchQuery.ipmiUser:type_name -> google.protobuf.StringValue
	42,  // 77: metal.api.v1.MachineSearchQuery.ipmiInterface:type_name -> google.protobuf.StringValue
	42,  // 78: metal.api.v1.MachineSearchQuery.fruChassisPartNumber:type_name -> google.protobuf.StringValue
	42,  // 79: metal.api.v1.MachineSearchQuery.fruChassisPartSerial:type_name -> google.protobuf.StringValue
	42,  // 80: metal.api.v1.MachineSearchQuery.fruBoardMfg:type_name -> google.protobuf.StringValue
	42,  // 81: metal.api.v1.MachineSearchQuery.fruBoardMfgSerial:type_name -> google.protobuf.StringValue
	42,  // 82: metal.api.v1.MachineSearchQuery.fruBoardPartNumber:type_name -> google.protobuf.StringValue
	42,  // 83: metal.api.v1.MachineSearchQuery.fruProductManufacturer:type_name -> google.protobuf.StringValue
	42,  // 84: metal.api.v1.MachineSearchQuery.fruProductPartNumber:type_name -> google.protobuf.StringValue
	42,  // 85: metal.api.v1.MachineSearchQuery.fruProductSerial:type_name -> google.protobuf.StringValue
	44,  // 86: metal.api.v1.MachineIPMIResponse.common:type_name -> metal.api.v1.Common
	28,  // 87: metal.api.v1.MachineIPMIResponse.machine:type_name -> metal.api.v1.Machine
	14,  // 88: metal.api.v1.MachineIPMIResponse.IPMI:type_name -> metal.api.v1.MachineIPMI
	38,  // 89: metal.api.v1.MachineIpmiReport.activeLeases:type_name -> metal.api.v1.MachineIpmiReport.ActiveLeasesEntry
	39,  // 90: metal.api.v1.MachineIpmiReportResponse.updatedLeases:type_name -> metal.api.v1.MachineIpmiReportResponse.UpdatedLeasesEntry
	40,  // 91: metal.api.v1.MachineIpmiReportResponse.createdLeases:type_name -> metal.api.v1.MachineIpmiReportResponse.CreatedLeasesEntry
	44,  // 92: metal.api.v1.MachineReinstallRequest.common:type_name -> metal.api.v1.Common
	26,  // 93: metal.api.v1.MachineNicExtended.machineNic:type_name -> metal.api.v1.MachineNic
	27,  // 94: metal.api.v1.MachineNicExtended.neighbors:type_name -> metal.api.v1.MachineNicExtended
	44,  // 95: metal.api.v1.Machine.common:type_name -> metal.api.v1.Common
	47,  // 96: metal.api.v1.Machine.partition:type_name -> metal.api.v1.PartitionResponse
	48,  // 97: metal.api.v1.Machine.size:type_name -> metal.api.v1.SizeResponse
	5,   // 98: metal.api.v1.Machine.hardware:type_name -> metal.api.v1.MachineHardware
	13,  // 99: metal.api.v1.Machine.BIOS:type_name -> metal.api.v1.MachineBIOS
	3,   // 100: metal.api.v1.Machine.allocation:type_name -> metal.api.v1.MachineAllocation
	7,   // 101: metal.api.v1.Machine.state:type_name -> metal.api.v1.MachineState
	8,   // 102: metal.api.v1.Machine.ledState:type_name -> metal.api.v1.ChassisIdentifyLEDState
	10,  // 103: metal.api.v1.Machine.recentProvisioningEvents:type_name -> metal.api.v1.MachineRecentProvisioningEvents
	42,  // 104: metal.api.v1.Machine.tags:type_name -> google.protobuf.StringValue
	28,  // 105: metal.api.v1.MachineCreateRequest.machine:type_name -> metal.api.v1.Machine
	28,  // 106: metal.api.v1.MachineUpdateRequest.machine:type_name -> metal.api.v1.Machine
	49,  // 107: metal.api.v1.MachineDeleteRequest.identifiable:type_name -> metal.api.v1.Identifiable
	49,  // 108: metal.api.v1.MachineGetRequest.identifiable:type_name -> metal.api.v1.Identifiable
	21,  // 109: metal.api.v1.MachineFindRequest.query:type_name -> metal.api.v1.MachineSearchQuery
	44,  // 110: metal.api.v1.MachineResponse.common:type_name -> metal.api.v1.Common
	28,  // 111: metal.api.v1.MachineResponse.machine:type_name -> metal.api.v1.Machine
	28,  // 112: metal.api.v1.MachineListResponse.machines:type_name -> metal.api.v1.Machine
	29,  // 113: metal.api.v1.MachineService.Create:input_type -> metal.api.v1.MachineCreateRequest
	30,  // 114: metal.api.v1.MachineService.Update:input_type -> metal.api.v1.MachineUpdateRequest
	31,  // 115: metal.api.v1.MachineService.Delete:input_type -> metal.api.v1.MachineDeleteRequest
	32,  // 116: metal.api.v1.MachineService.Get:input_type -> metal.api.v1.MachineGetRequest
	33,  // 117: metal.api.v1.MachineService.Find:input_type -> metal.api.v1.MachineFindRequest
	35,  // 118: metal.api.v1.MachineService.List:input_type -> metal.api.v1.MachineListRequest
	34,  // 119: metal.api.v1.MachineService.Create:output_type -> metal.api.v1.MachineResponse
	34,  // 120: metal.api.v1.MachineService.Update:output_type -> metal.api.v1.MachineResponse
	34,  // 121: metal.api.v1.MachineService.Delete:output_type -> metal.api.v1.MachineResponse
	34,  // 122: metal.api.v1.MachineService.Get:output_type -> metal.api.v1.MachineResponse
	36,  // 123: metal.api.v1.MachineService.Find:output_type -> metal.api.v1.MachineListResponse
	36,  // 124: metal.api.v1.MachineService.List:output_type -> metal.api.v1.MachineListResponse
	119, // [119:125] is the sub-list for method output_type
	113, // [113:119] is the sub-list for method input_type
	113, // [113:113] is the sub-list for extension type_name
	113, // [113:113] is the sub-list for extension extendee
	0,   // [0:113] is the sub-list for field type_name
}

func init() { file_v1_machine_proto_init() }
func file_v1_machine_proto_init() {
	if File_v1_machine_proto != nil {
		return
	}
	file_v1_common_proto_init()
	file_v1_identifiable_proto_init()
	file_v1_image_proto_init()
	file_v1_partition_proto_init()
	file_v1_size_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_machine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineSetup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineReinstall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineHardwareBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineHardware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineHardwareExtended); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChassisIdentifyLEDState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineBlockDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineRecentProvisioningEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineProvisioningEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineLivelinessReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineBIOS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineIPMI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineFru); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineAllocateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineAllocationNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineDiskPartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineFinalizeAllocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineSearchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineIPMIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineIpmiReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineIpmiReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineReinstallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineNic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineNicExtended); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineFindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_machine_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_machine_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_machine_proto_goTypes,
		DependencyIndexes: file_v1_machine_proto_depIdxs,
		MessageInfos:      file_v1_machine_proto_msgTypes,
	}.Build()
	File_v1_machine_proto = out.File
	file_v1_machine_proto_rawDesc = nil
	file_v1_machine_proto_goTypes = nil
	file_v1_machine_proto_depIdxs = nil
}
