---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ template "metal-api.fullname" . }}
  name: {{ template "metal-api.fullname" . }}
spec:
    selector:
        matchLabels:
            app: {{ template "metal-api.fullname" . }}
  replicas: {{ .Values.metal_api.replicas }}
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: {{ template "metal-api.fullname" . }}
    spec:
      enableServiceLinks: False
      containers:
      - env:
        - name: DEBUG
          value: "1"
        - name: METAL_API_BIND_ADDR
          value: 0.0.0.0
        - name: ZAP_ENCODING
          value: logfmt
        - name: ZAP_LEVEL
          value: debug
        - name: METAL_API_IPAM_DB_ADDR
          value: postgres
        - name: METAL_API_IPAM_DB_PORT
          value: "5432"
        - name: METAL_API_IPAM_DB_NAME
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_DB
              name: postgres-env
        - name: METAL_API_IPAM_DB_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_PASSWORD
              name: postgres-env
        - name: METAL_API_IPAM_DB_USER
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_USER
              name: postgres-env
        - name: METAL_API_DB_ADDR
          value: rethinkdb-rethinkdb-proxy:{{ .Values.ports.rethinkdb }}
        - name: METAL_API_DEX_ADDR
          value: {{ .Values.images.metal_api.dex_addr }}
{{- if not .Values.dev_setup }}
        - name: METAL_API_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rethinkdb-rethinkdb
              key: rethinkdb-password
{{- end }}
        - name: METAL_API_LOG_LEVEL
          value: debug
        image: {{ .Values.images.metal_api.image }}:{{ .Values.images.metal_api.tag }}
        name: metal-api
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: {{ template "metal-api.fullname" . }}
  name: {{ template "metal-api.fullname" . }}
spec:
  ports:
  - name: "{{ .Values.ports.metal_api }}"
    port: {{ .Values.ports.metal_api }}
    targetPort: 8080
  selector:
    app: {{ template "metal-api.fullname" . }}
  type: LoadBalancer
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "metal-api.fullname" . }}
  labels:
    app: {{ template "metal-api.fullname" . }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: {{ template "metal-api.fullname" . }}
      labels:
        app: {{ template "metal-api.fullname" . }}
    spec:
      restartPolicy: Never
      containers:
      - env:
        - name: DEBUG
          value: "1"
        - name: ZAP_ENCODING
          value: logfmt
        - name: ZAP_LEVEL
          value: debug
        - name: METAL_API_DB_ADDR
          value: rethinkdb-rethinkdb-proxy:{{ .Values.ports.rethinkdb }}
{{- if not .Values.dev_setup }}
        - name: METAL_API_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rethinkdb-rethinkdb
              key: rethinkdb-password
{{- end }}
        - name: METAL_API_LOG_LEVEL
          value: debug
        image: {{ .Values.images.metal_api.image }}:{{ .Values.images.metal_api.tag }}
        name: metal-api
        command: ["/metal-api"]
        args: ["initdb"]
        ports:
        - containerPort: 8080
        resources: {}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "metal-api.fullname" . }}-initdb
  labels:
    app: {{ template "metal-api.fullname" . }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  template:
    metadata:
      name: {{ template "metal-api.fullname" . }}-initdb
      labels:
        app: {{ template "metal-api.fullname" . }}
    spec:
      restartPolicy: Never
      containers:
      - env:
        - name: DEBUG
          value: "1"
        - name: ZAP_ENCODING
          value: logfmt
        - name: ZAP_LEVEL
          value: debug
        - name: METAL_API_DB_ADDR
          value: rethinkdb-rethinkdb-proxy:{{ .Values.ports.rethinkdb }}
{{- if not .Values.dev_setup }}
        - name: METAL_API_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rethinkdb-rethinkdb
              key: rethinkdb-password
{{- end }}
        - name: METAL_API_LOG_LEVEL
          value: debug
        image: {{ .Values.images.metal_api.image }}:{{ .Values.images.metal_api.tag }}
        name: metal-api-initdb
        command: ["/metal-api"]
        args: ["initdb"]
        resources: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "metal-api.fullname" . }}-masterdata
  labels:
    app: {{ template "metal-api.fullname" . }}
data:
  image.json: |
    {{ .Values.metal_api.images }}
  size.json: |
    {{ .Values.metal_api.sizes }}
  partition.json: |
    {{ .Values.metal_api.partitions }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "metal-api.fullname" . }}-createmasterdata
  labels:
    app: {{ template "metal-api.fullname" . }}
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: {{ template "metal-api.fullname" . }}-createmasterdata
      labels:
        app: {{ template "metal-api.fullname" . }}
    spec:
      restartPolicy: Never
      containers:
      - image: gempesaw/curl-jq
        name: metal-api-createmasterdata
        env:
        - name: API_BASE_URL
          value: {{ template "metal-api.fullname" . }}:8080
        command:
          - sh
          - -c
          - |
            set -exu
            for entity in image size partition; do
              cat /masterdata/${entity}.json | jq -r -c -M ".[]" | while read line; do
                entity_id=$(echo $line | jq -r ".id")
                if curl -s $API_BASE_URL/v1/${entity} | jq -c -e ".[] | select(.id | contains(\"${entity_id}\"))" ; then
                  echo "updating ${entity}: ${entity_id}"
                  method=POST
                else
                  echo "creating ${entity}: ${entity_id}"
                  method=PUT
                fi
                curl --fail -X${method} -H "Content-Type: application/json" -d "$line" $API_BASE_URL/v1/${entity}
              done
            done
        resources: {}
        volumeMounts:
        - name: masterdata
          mountPath: /masterdata
      volumes:
        - name: masterdata
          configMap:
            name: {{ template "metal-api.fullname" . }}-masterdata
            items:
            - key: image.json
              path: image.json
            - key: size.json
              path: size.json
            - key: partition.json
              path: partition.json
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "metal-api.fullname" . }}-createmasterdata
  labels:
    app: {{ template "metal-api.fullname" . }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: {{ template "metal-api.fullname" . }}-createmasterdata
      labels:
        app: {{ template "metal-api.fullname" . }}
    spec:
      restartPolicy: Never
      containers:
      - image: gempesaw/curl-jq
        name: metal-api-createmasterdata
        env:
        - name: API_BASE_URL
          value: {{ template "metal-api.fullname" . }}:8080
        command:
          - sh
          - -c
          - |
            set -exu
            for entity in image size partition; do
              cat /masterdata/${entity}.json | jq -r -c -M ".[]" | while read line; do
                entity_id=$(echo $line | jq -r ".id")
                if curl -s $API_BASE_URL/v1/${entity} | jq -c -e ".[] | select(.id | contains(\"${entity_id}\"))" ; then
                  echo "updating ${entity}: ${entity_id}"
                  method=POST
                else
                  echo "creating ${entity}: ${entity_id}"
                  method=PUT
                fi
                curl --fail -X${method} -H "Content-Type: application/json" -d "$line" $API_BASE_URL/v1/${entity}
              done
            done
        resources: {}
        volumeMounts:
        - name: masterdata
          mountPath: /masterdata
      volumes:
        - name: masterdata
          configMap:
            name: {{ template "metal-api.fullname" . }}-masterdata
            items:
            - key: image.json
              path: image.json
            - key: size.json
              path: size.json
            - key: partition.json
              path: partition.json
