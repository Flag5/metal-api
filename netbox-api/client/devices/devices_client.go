// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new devices API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for devices API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
NetboxAPIProxyAPIDeviceAllocate allocates a device

Allocated a registered device for a tenant
*/
func (a *Client) NetboxAPIProxyAPIDeviceAllocate(params *NetboxAPIProxyAPIDeviceAllocateParams, authInfo runtime.ClientAuthInfoWriter) (*NetboxAPIProxyAPIDeviceAllocateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetboxAPIProxyAPIDeviceAllocateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "netbox_api_proxy.api.device_allocate",
		Method:             "POST",
		PathPattern:        "/devices/{uuid}/allocate",
		ProducesMediaTypes: []string{"application/json", "application/problem+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetboxAPIProxyAPIDeviceAllocateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NetboxAPIProxyAPIDeviceAllocateOK), nil

}

/*
NetboxAPIProxyAPIDeviceRegister registers a new device

Register a new device to the netbox
*/
func (a *Client) NetboxAPIProxyAPIDeviceRegister(params *NetboxAPIProxyAPIDeviceRegisterParams, authInfo runtime.ClientAuthInfoWriter) (*NetboxAPIProxyAPIDeviceRegisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetboxAPIProxyAPIDeviceRegisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "netbox_api_proxy.api.device_register",
		Method:             "POST",
		PathPattern:        "/devices/{uuid}/register",
		ProducesMediaTypes: []string{"application/json", "application/problem+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetboxAPIProxyAPIDeviceRegisterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NetboxAPIProxyAPIDeviceRegisterOK), nil

}

/*
NetboxAPIProxyAPIDeviceRelease releases a device

Releases an allocated device
*/
func (a *Client) NetboxAPIProxyAPIDeviceRelease(params *NetboxAPIProxyAPIDeviceReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*NetboxAPIProxyAPIDeviceReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetboxAPIProxyAPIDeviceReleaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "netbox_api_proxy.api.device_release",
		Method:             "POST",
		PathPattern:        "/devices/{uuid}/release",
		ProducesMediaTypes: []string{"application/json", "application/problem+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetboxAPIProxyAPIDeviceReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NetboxAPIProxyAPIDeviceReleaseOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
