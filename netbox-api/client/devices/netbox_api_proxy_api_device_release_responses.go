// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "git.f-i-ts.de/cloud-native/maas/metal-api/netbox-api/models"
)

// NetboxAPIProxyAPIDeviceReleaseReader is a Reader for the NetboxAPIProxyAPIDeviceRelease structure.
type NetboxAPIProxyAPIDeviceReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NetboxAPIProxyAPIDeviceReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewNetboxAPIProxyAPIDeviceReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewNetboxAPIProxyAPIDeviceReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewNetboxAPIProxyAPIDeviceReleaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewNetboxAPIProxyAPIDeviceReleaseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewNetboxAPIProxyAPIDeviceReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewNetboxAPIProxyAPIDeviceReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNetboxAPIProxyAPIDeviceReleaseOK creates a NetboxAPIProxyAPIDeviceReleaseOK with default headers values
func NewNetboxAPIProxyAPIDeviceReleaseOK() *NetboxAPIProxyAPIDeviceReleaseOK {
	return &NetboxAPIProxyAPIDeviceReleaseOK{}
}

/*NetboxAPIProxyAPIDeviceReleaseOK handles this case with default header values.

OK
*/
type NetboxAPIProxyAPIDeviceReleaseOK struct {
}

func (o *NetboxAPIProxyAPIDeviceReleaseOK) Error() string {
	return fmt.Sprintf("[POST /devices/{uuid}/release][%d] netboxApiProxyApiDeviceReleaseOK ", 200)
}

func (o *NetboxAPIProxyAPIDeviceReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNetboxAPIProxyAPIDeviceReleaseBadRequest creates a NetboxAPIProxyAPIDeviceReleaseBadRequest with default headers values
func NewNetboxAPIProxyAPIDeviceReleaseBadRequest() *NetboxAPIProxyAPIDeviceReleaseBadRequest {
	return &NetboxAPIProxyAPIDeviceReleaseBadRequest{}
}

/*NetboxAPIProxyAPIDeviceReleaseBadRequest handles this case with default header values.

Bad request
*/
type NetboxAPIProxyAPIDeviceReleaseBadRequest struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIDeviceReleaseBadRequest) Error() string {
	return fmt.Sprintf("[POST /devices/{uuid}/release][%d] netboxApiProxyApiDeviceReleaseBadRequest  %+v", 400, o.Payload)
}

func (o *NetboxAPIProxyAPIDeviceReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIDeviceReleaseUnauthorized creates a NetboxAPIProxyAPIDeviceReleaseUnauthorized with default headers values
func NewNetboxAPIProxyAPIDeviceReleaseUnauthorized() *NetboxAPIProxyAPIDeviceReleaseUnauthorized {
	return &NetboxAPIProxyAPIDeviceReleaseUnauthorized{}
}

/*NetboxAPIProxyAPIDeviceReleaseUnauthorized handles this case with default header values.

Unauthorized
*/
type NetboxAPIProxyAPIDeviceReleaseUnauthorized struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIDeviceReleaseUnauthorized) Error() string {
	return fmt.Sprintf("[POST /devices/{uuid}/release][%d] netboxApiProxyApiDeviceReleaseUnauthorized  %+v", 401, o.Payload)
}

func (o *NetboxAPIProxyAPIDeviceReleaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIDeviceReleaseForbidden creates a NetboxAPIProxyAPIDeviceReleaseForbidden with default headers values
func NewNetboxAPIProxyAPIDeviceReleaseForbidden() *NetboxAPIProxyAPIDeviceReleaseForbidden {
	return &NetboxAPIProxyAPIDeviceReleaseForbidden{}
}

/*NetboxAPIProxyAPIDeviceReleaseForbidden handles this case with default header values.

Forbidden
*/
type NetboxAPIProxyAPIDeviceReleaseForbidden struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIDeviceReleaseForbidden) Error() string {
	return fmt.Sprintf("[POST /devices/{uuid}/release][%d] netboxApiProxyApiDeviceReleaseForbidden  %+v", 403, o.Payload)
}

func (o *NetboxAPIProxyAPIDeviceReleaseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIDeviceReleaseNotFound creates a NetboxAPIProxyAPIDeviceReleaseNotFound with default headers values
func NewNetboxAPIProxyAPIDeviceReleaseNotFound() *NetboxAPIProxyAPIDeviceReleaseNotFound {
	return &NetboxAPIProxyAPIDeviceReleaseNotFound{}
}

/*NetboxAPIProxyAPIDeviceReleaseNotFound handles this case with default header values.

Not found
*/
type NetboxAPIProxyAPIDeviceReleaseNotFound struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIDeviceReleaseNotFound) Error() string {
	return fmt.Sprintf("[POST /devices/{uuid}/release][%d] netboxApiProxyApiDeviceReleaseNotFound  %+v", 404, o.Payload)
}

func (o *NetboxAPIProxyAPIDeviceReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIDeviceReleaseInternalServerError creates a NetboxAPIProxyAPIDeviceReleaseInternalServerError with default headers values
func NewNetboxAPIProxyAPIDeviceReleaseInternalServerError() *NetboxAPIProxyAPIDeviceReleaseInternalServerError {
	return &NetboxAPIProxyAPIDeviceReleaseInternalServerError{}
}

/*NetboxAPIProxyAPIDeviceReleaseInternalServerError handles this case with default header values.

Internal server error
*/
type NetboxAPIProxyAPIDeviceReleaseInternalServerError struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIDeviceReleaseInternalServerError) Error() string {
	return fmt.Sprintf("[POST /devices/{uuid}/release][%d] netboxApiProxyApiDeviceReleaseInternalServerError  %+v", 500, o.Payload)
}

func (o *NetboxAPIProxyAPIDeviceReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
