// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "git.f-i-ts.de/cloud-native/maas/metal-api/netbox-api/models"
)

// NetboxAPIProxyAPIDeviceAllocateReader is a Reader for the NetboxAPIProxyAPIDeviceAllocate structure.
type NetboxAPIProxyAPIDeviceAllocateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NetboxAPIProxyAPIDeviceAllocateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewNetboxAPIProxyAPIDeviceAllocateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewNetboxAPIProxyAPIDeviceAllocateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewNetboxAPIProxyAPIDeviceAllocateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewNetboxAPIProxyAPIDeviceAllocateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewNetboxAPIProxyAPIDeviceAllocateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewNetboxAPIProxyAPIDeviceAllocateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNetboxAPIProxyAPIDeviceAllocateOK creates a NetboxAPIProxyAPIDeviceAllocateOK with default headers values
func NewNetboxAPIProxyAPIDeviceAllocateOK() *NetboxAPIProxyAPIDeviceAllocateOK {
	return &NetboxAPIProxyAPIDeviceAllocateOK{}
}

/*NetboxAPIProxyAPIDeviceAllocateOK handles this case with default header values.

OK
*/
type NetboxAPIProxyAPIDeviceAllocateOK struct {
	Payload *models.DeviceAllocationResponse
}

func (o *NetboxAPIProxyAPIDeviceAllocateOK) Error() string {
	return fmt.Sprintf("[POST /devices/{uuid}/allocate][%d] netboxApiProxyApiDeviceAllocateOK  %+v", 200, o.Payload)
}

func (o *NetboxAPIProxyAPIDeviceAllocateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeviceAllocationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIDeviceAllocateBadRequest creates a NetboxAPIProxyAPIDeviceAllocateBadRequest with default headers values
func NewNetboxAPIProxyAPIDeviceAllocateBadRequest() *NetboxAPIProxyAPIDeviceAllocateBadRequest {
	return &NetboxAPIProxyAPIDeviceAllocateBadRequest{}
}

/*NetboxAPIProxyAPIDeviceAllocateBadRequest handles this case with default header values.

Bad request
*/
type NetboxAPIProxyAPIDeviceAllocateBadRequest struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIDeviceAllocateBadRequest) Error() string {
	return fmt.Sprintf("[POST /devices/{uuid}/allocate][%d] netboxApiProxyApiDeviceAllocateBadRequest  %+v", 400, o.Payload)
}

func (o *NetboxAPIProxyAPIDeviceAllocateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIDeviceAllocateUnauthorized creates a NetboxAPIProxyAPIDeviceAllocateUnauthorized with default headers values
func NewNetboxAPIProxyAPIDeviceAllocateUnauthorized() *NetboxAPIProxyAPIDeviceAllocateUnauthorized {
	return &NetboxAPIProxyAPIDeviceAllocateUnauthorized{}
}

/*NetboxAPIProxyAPIDeviceAllocateUnauthorized handles this case with default header values.

Unauthorized
*/
type NetboxAPIProxyAPIDeviceAllocateUnauthorized struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIDeviceAllocateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /devices/{uuid}/allocate][%d] netboxApiProxyApiDeviceAllocateUnauthorized  %+v", 401, o.Payload)
}

func (o *NetboxAPIProxyAPIDeviceAllocateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIDeviceAllocateForbidden creates a NetboxAPIProxyAPIDeviceAllocateForbidden with default headers values
func NewNetboxAPIProxyAPIDeviceAllocateForbidden() *NetboxAPIProxyAPIDeviceAllocateForbidden {
	return &NetboxAPIProxyAPIDeviceAllocateForbidden{}
}

/*NetboxAPIProxyAPIDeviceAllocateForbidden handles this case with default header values.

Forbidden
*/
type NetboxAPIProxyAPIDeviceAllocateForbidden struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIDeviceAllocateForbidden) Error() string {
	return fmt.Sprintf("[POST /devices/{uuid}/allocate][%d] netboxApiProxyApiDeviceAllocateForbidden  %+v", 403, o.Payload)
}

func (o *NetboxAPIProxyAPIDeviceAllocateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIDeviceAllocateNotFound creates a NetboxAPIProxyAPIDeviceAllocateNotFound with default headers values
func NewNetboxAPIProxyAPIDeviceAllocateNotFound() *NetboxAPIProxyAPIDeviceAllocateNotFound {
	return &NetboxAPIProxyAPIDeviceAllocateNotFound{}
}

/*NetboxAPIProxyAPIDeviceAllocateNotFound handles this case with default header values.

Not found
*/
type NetboxAPIProxyAPIDeviceAllocateNotFound struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIDeviceAllocateNotFound) Error() string {
	return fmt.Sprintf("[POST /devices/{uuid}/allocate][%d] netboxApiProxyApiDeviceAllocateNotFound  %+v", 404, o.Payload)
}

func (o *NetboxAPIProxyAPIDeviceAllocateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIDeviceAllocateInternalServerError creates a NetboxAPIProxyAPIDeviceAllocateInternalServerError with default headers values
func NewNetboxAPIProxyAPIDeviceAllocateInternalServerError() *NetboxAPIProxyAPIDeviceAllocateInternalServerError {
	return &NetboxAPIProxyAPIDeviceAllocateInternalServerError{}
}

/*NetboxAPIProxyAPIDeviceAllocateInternalServerError handles this case with default header values.

Internal server error
*/
type NetboxAPIProxyAPIDeviceAllocateInternalServerError struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIDeviceAllocateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /devices/{uuid}/allocate][%d] netboxApiProxyApiDeviceAllocateInternalServerError  %+v", 500, o.Payload)
}

func (o *NetboxAPIProxyAPIDeviceAllocateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
