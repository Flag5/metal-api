// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "git.f-i-ts.de/cloud-native/maas/metal-api/netbox-api/models"
)

// LibServerReleaseDeviceReader is a Reader for the LibServerReleaseDevice structure.
type LibServerReleaseDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LibServerReleaseDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewLibServerReleaseDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewLibServerReleaseDeviceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewLibServerReleaseDeviceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewLibServerReleaseDeviceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLibServerReleaseDeviceOK creates a LibServerReleaseDeviceOK with default headers values
func NewLibServerReleaseDeviceOK() *LibServerReleaseDeviceOK {
	return &LibServerReleaseDeviceOK{}
}

/*LibServerReleaseDeviceOK handles this case with default header values.

OK
*/
type LibServerReleaseDeviceOK struct {
}

func (o *LibServerReleaseDeviceOK) Error() string {
	return fmt.Sprintf("[POST /release-device/{uuid}][%d] libServerReleaseDeviceOK ", 200)
}

func (o *LibServerReleaseDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLibServerReleaseDeviceBadRequest creates a LibServerReleaseDeviceBadRequest with default headers values
func NewLibServerReleaseDeviceBadRequest() *LibServerReleaseDeviceBadRequest {
	return &LibServerReleaseDeviceBadRequest{}
}

/*LibServerReleaseDeviceBadRequest handles this case with default header values.

Bad request
*/
type LibServerReleaseDeviceBadRequest struct {
	Payload *models.Problem
}

func (o *LibServerReleaseDeviceBadRequest) Error() string {
	return fmt.Sprintf("[POST /release-device/{uuid}][%d] libServerReleaseDeviceBadRequest  %+v", 400, o.Payload)
}

func (o *LibServerReleaseDeviceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibServerReleaseDeviceNotFound creates a LibServerReleaseDeviceNotFound with default headers values
func NewLibServerReleaseDeviceNotFound() *LibServerReleaseDeviceNotFound {
	return &LibServerReleaseDeviceNotFound{}
}

/*LibServerReleaseDeviceNotFound handles this case with default header values.

Not found
*/
type LibServerReleaseDeviceNotFound struct {
	Payload *models.Problem
}

func (o *LibServerReleaseDeviceNotFound) Error() string {
	return fmt.Sprintf("[POST /release-device/{uuid}][%d] libServerReleaseDeviceNotFound  %+v", 404, o.Payload)
}

func (o *LibServerReleaseDeviceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibServerReleaseDeviceInternalServerError creates a LibServerReleaseDeviceInternalServerError with default headers values
func NewLibServerReleaseDeviceInternalServerError() *LibServerReleaseDeviceInternalServerError {
	return &LibServerReleaseDeviceInternalServerError{}
}

/*LibServerReleaseDeviceInternalServerError handles this case with default header values.

Internal server error
*/
type LibServerReleaseDeviceInternalServerError struct {
	Payload *models.Problem
}

func (o *LibServerReleaseDeviceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /release-device/{uuid}][%d] libServerReleaseDeviceInternalServerError  %+v", 500, o.Payload)
}

func (o *LibServerReleaseDeviceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
