// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "git.f-i-ts.de/cloud-native/maas/metal-api/netbox-api/models"
)

// LibServerAllocateDeviceReader is a Reader for the LibServerAllocateDevice structure.
type LibServerAllocateDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LibServerAllocateDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewLibServerAllocateDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewLibServerAllocateDeviceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewLibServerAllocateDeviceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewLibServerAllocateDeviceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLibServerAllocateDeviceOK creates a LibServerAllocateDeviceOK with default headers values
func NewLibServerAllocateDeviceOK() *LibServerAllocateDeviceOK {
	return &LibServerAllocateDeviceOK{}
}

/*LibServerAllocateDeviceOK handles this case with default header values.

OK
*/
type LibServerAllocateDeviceOK struct {
	Payload *models.DeviceAllocationResponse
}

func (o *LibServerAllocateDeviceOK) Error() string {
	return fmt.Sprintf("[POST /allocate-device/{uuid}][%d] libServerAllocateDeviceOK  %+v", 200, o.Payload)
}

func (o *LibServerAllocateDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeviceAllocationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibServerAllocateDeviceBadRequest creates a LibServerAllocateDeviceBadRequest with default headers values
func NewLibServerAllocateDeviceBadRequest() *LibServerAllocateDeviceBadRequest {
	return &LibServerAllocateDeviceBadRequest{}
}

/*LibServerAllocateDeviceBadRequest handles this case with default header values.

Bad request
*/
type LibServerAllocateDeviceBadRequest struct {
}

func (o *LibServerAllocateDeviceBadRequest) Error() string {
	return fmt.Sprintf("[POST /allocate-device/{uuid}][%d] libServerAllocateDeviceBadRequest ", 400)
}

func (o *LibServerAllocateDeviceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLibServerAllocateDeviceNotFound creates a LibServerAllocateDeviceNotFound with default headers values
func NewLibServerAllocateDeviceNotFound() *LibServerAllocateDeviceNotFound {
	return &LibServerAllocateDeviceNotFound{}
}

/*LibServerAllocateDeviceNotFound handles this case with default header values.

Not found
*/
type LibServerAllocateDeviceNotFound struct {
}

func (o *LibServerAllocateDeviceNotFound) Error() string {
	return fmt.Sprintf("[POST /allocate-device/{uuid}][%d] libServerAllocateDeviceNotFound ", 404)
}

func (o *LibServerAllocateDeviceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLibServerAllocateDeviceInternalServerError creates a LibServerAllocateDeviceInternalServerError with default headers values
func NewLibServerAllocateDeviceInternalServerError() *LibServerAllocateDeviceInternalServerError {
	return &LibServerAllocateDeviceInternalServerError{}
}

/*LibServerAllocateDeviceInternalServerError handles this case with default header values.

Internal server error
*/
type LibServerAllocateDeviceInternalServerError struct {
}

func (o *LibServerAllocateDeviceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /allocate-device/{uuid}][%d] libServerAllocateDeviceInternalServerError ", 500)
}

func (o *LibServerAllocateDeviceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
