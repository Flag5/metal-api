// Code generated by go-swagger; DO NOT EDIT.

package machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new machines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for machines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
NetboxAPIProxyAPIMachineAllocate allocates a machine

Allocated a registered machine for a tenant
*/
func (a *Client) NetboxAPIProxyAPIMachineAllocate(params *NetboxAPIProxyAPIMachineAllocateParams, authInfo runtime.ClientAuthInfoWriter) (*NetboxAPIProxyAPIMachineAllocateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetboxAPIProxyAPIMachineAllocateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "netbox_api_proxy.api.machine_allocate",
		Method:             "POST",
		PathPattern:        "/machines/{uuid}/allocate",
		ProducesMediaTypes: []string{"application/json", "application/problem+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetboxAPIProxyAPIMachineAllocateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NetboxAPIProxyAPIMachineAllocateOK), nil

}

/*
NetboxAPIProxyAPIMachineRegister registers a new machine

Register a new machine to the netbox
*/
func (a *Client) NetboxAPIProxyAPIMachineRegister(params *NetboxAPIProxyAPIMachineRegisterParams, authInfo runtime.ClientAuthInfoWriter) (*NetboxAPIProxyAPIMachineRegisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetboxAPIProxyAPIMachineRegisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "netbox_api_proxy.api.machine_register",
		Method:             "POST",
		PathPattern:        "/machines/{uuid}/register",
		ProducesMediaTypes: []string{"application/json", "application/problem+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetboxAPIProxyAPIMachineRegisterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NetboxAPIProxyAPIMachineRegisterOK), nil

}

/*
NetboxAPIProxyAPIMachineRelease releases a machine

Releases an allocated machine
*/
func (a *Client) NetboxAPIProxyAPIMachineRelease(params *NetboxAPIProxyAPIMachineReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*NetboxAPIProxyAPIMachineReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetboxAPIProxyAPIMachineReleaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "netbox_api_proxy.api.machine_release",
		Method:             "POST",
		PathPattern:        "/machines/{uuid}/release",
		ProducesMediaTypes: []string{"application/json", "application/problem+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetboxAPIProxyAPIMachineReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NetboxAPIProxyAPIMachineReleaseOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
