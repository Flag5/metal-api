// Code generated by go-swagger; DO NOT EDIT.

package ips

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "git.f-i-ts.de/cloud-native/metal/metal-api/netbox-api/models"
)

// NetboxAPIProxyAPIAllocateIPReader is a Reader for the NetboxAPIProxyAPIAllocateIP structure.
type NetboxAPIProxyAPIAllocateIPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NetboxAPIProxyAPIAllocateIPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewNetboxAPIProxyAPIAllocateIPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewNetboxAPIProxyAPIAllocateIPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewNetboxAPIProxyAPIAllocateIPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewNetboxAPIProxyAPIAllocateIPForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewNetboxAPIProxyAPIAllocateIPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewNetboxAPIProxyAPIAllocateIPInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNetboxAPIProxyAPIAllocateIPOK creates a NetboxAPIProxyAPIAllocateIPOK with default headers values
func NewNetboxAPIProxyAPIAllocateIPOK() *NetboxAPIProxyAPIAllocateIPOK {
	return &NetboxAPIProxyAPIAllocateIPOK{}
}

/*NetboxAPIProxyAPIAllocateIPOK handles this case with default header values.

OK
*/
type NetboxAPIProxyAPIAllocateIPOK struct {
	Payload *models.CIDR
}

func (o *NetboxAPIProxyAPIAllocateIPOK) Error() string {
	return fmt.Sprintf("[POST /ips/allocate][%d] netboxApiProxyApiAllocateIpOK  %+v", 200, o.Payload)
}

func (o *NetboxAPIProxyAPIAllocateIPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CIDR)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIAllocateIPBadRequest creates a NetboxAPIProxyAPIAllocateIPBadRequest with default headers values
func NewNetboxAPIProxyAPIAllocateIPBadRequest() *NetboxAPIProxyAPIAllocateIPBadRequest {
	return &NetboxAPIProxyAPIAllocateIPBadRequest{}
}

/*NetboxAPIProxyAPIAllocateIPBadRequest handles this case with default header values.

Bad request
*/
type NetboxAPIProxyAPIAllocateIPBadRequest struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIAllocateIPBadRequest) Error() string {
	return fmt.Sprintf("[POST /ips/allocate][%d] netboxApiProxyApiAllocateIpBadRequest  %+v", 400, o.Payload)
}

func (o *NetboxAPIProxyAPIAllocateIPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIAllocateIPUnauthorized creates a NetboxAPIProxyAPIAllocateIPUnauthorized with default headers values
func NewNetboxAPIProxyAPIAllocateIPUnauthorized() *NetboxAPIProxyAPIAllocateIPUnauthorized {
	return &NetboxAPIProxyAPIAllocateIPUnauthorized{}
}

/*NetboxAPIProxyAPIAllocateIPUnauthorized handles this case with default header values.

Unauthorized
*/
type NetboxAPIProxyAPIAllocateIPUnauthorized struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIAllocateIPUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ips/allocate][%d] netboxApiProxyApiAllocateIpUnauthorized  %+v", 401, o.Payload)
}

func (o *NetboxAPIProxyAPIAllocateIPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIAllocateIPForbidden creates a NetboxAPIProxyAPIAllocateIPForbidden with default headers values
func NewNetboxAPIProxyAPIAllocateIPForbidden() *NetboxAPIProxyAPIAllocateIPForbidden {
	return &NetboxAPIProxyAPIAllocateIPForbidden{}
}

/*NetboxAPIProxyAPIAllocateIPForbidden handles this case with default header values.

Forbidden
*/
type NetboxAPIProxyAPIAllocateIPForbidden struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIAllocateIPForbidden) Error() string {
	return fmt.Sprintf("[POST /ips/allocate][%d] netboxApiProxyApiAllocateIpForbidden  %+v", 403, o.Payload)
}

func (o *NetboxAPIProxyAPIAllocateIPForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIAllocateIPNotFound creates a NetboxAPIProxyAPIAllocateIPNotFound with default headers values
func NewNetboxAPIProxyAPIAllocateIPNotFound() *NetboxAPIProxyAPIAllocateIPNotFound {
	return &NetboxAPIProxyAPIAllocateIPNotFound{}
}

/*NetboxAPIProxyAPIAllocateIPNotFound handles this case with default header values.

Not found
*/
type NetboxAPIProxyAPIAllocateIPNotFound struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIAllocateIPNotFound) Error() string {
	return fmt.Sprintf("[POST /ips/allocate][%d] netboxApiProxyApiAllocateIpNotFound  %+v", 404, o.Payload)
}

func (o *NetboxAPIProxyAPIAllocateIPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetboxAPIProxyAPIAllocateIPInternalServerError creates a NetboxAPIProxyAPIAllocateIPInternalServerError with default headers values
func NewNetboxAPIProxyAPIAllocateIPInternalServerError() *NetboxAPIProxyAPIAllocateIPInternalServerError {
	return &NetboxAPIProxyAPIAllocateIPInternalServerError{}
}

/*NetboxAPIProxyAPIAllocateIPInternalServerError handles this case with default header values.

Internal server error
*/
type NetboxAPIProxyAPIAllocateIPInternalServerError struct {
	Payload *models.Problem
}

func (o *NetboxAPIProxyAPIAllocateIPInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ips/allocate][%d] netboxApiProxyApiAllocateIpInternalServerError  %+v", 500, o.Payload)
}

func (o *NetboxAPIProxyAPIAllocateIPInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Problem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
