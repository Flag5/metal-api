// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MachineRegistrationRequest machine registration request
// swagger:model MachineRegistrationRequest
type MachineRegistrationRequest struct {

	// The network interfaces of this machine
	// Required: true
	Nics []*Nic `json:"nics"`

	// The id of the partition
	// Required: true
	// Min Length: 1
	Partition *string `json:"partition"`

	// The name of the rack
	// Required: true
	// Min Length: 1
	Rack *string `json:"rack"`

	// The size of the machine
	// Required: true
	// Min Length: 1
	Size *string `json:"size"`
}

// Validate validates this machine registration request
func (m *MachineRegistrationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MachineRegistrationRequest) validateNics(formats strfmt.Registry) error {

	if err := validate.Required("nics", "body", m.Nics); err != nil {
		return err
	}

	for i := 0; i < len(m.Nics); i++ {
		if swag.IsZero(m.Nics[i]) { // not required
			continue
		}

		if m.Nics[i] != nil {
			if err := m.Nics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MachineRegistrationRequest) validatePartition(formats strfmt.Registry) error {

	if err := validate.Required("partition", "body", m.Partition); err != nil {
		return err
	}

	if err := validate.MinLength("partition", "body", string(*m.Partition), 1); err != nil {
		return err
	}

	return nil
}

func (m *MachineRegistrationRequest) validateRack(formats strfmt.Registry) error {

	if err := validate.Required("rack", "body", m.Rack); err != nil {
		return err
	}

	if err := validate.MinLength("rack", "body", string(*m.Rack), 1); err != nil {
		return err
	}

	return nil
}

func (m *MachineRegistrationRequest) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	if err := validate.MinLength("size", "body", string(*m.Size), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MachineRegistrationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MachineRegistrationRequest) UnmarshalBinary(b []byte) error {
	var res MachineRegistrationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
