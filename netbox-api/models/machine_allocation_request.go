// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MachineAllocationRequest machine allocation request
// swagger:model MachineAllocationRequest
type MachineAllocationRequest struct {

	// Additional description for this machine in the netbox
	// Min Length: 1
	Description string `json:"description,omitempty"`

	// The desired name for this machine in the netbox
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// The operating system name that will be installed on this machine
	// Min Length: 1
	Os string `json:"os,omitempty"`

	// The name of the project to assign this machine to
	// Required: true
	// Min Length: 1
	Project *string `json:"project"`

	// The name of the tenant to assign this machine to
	// Required: true
	// Min Length: 1
	Tenant *string `json:"tenant"`

	// The name of the vrf to assign this machine to
	// Required: true
	// Min Length: 1
	Vrf *string `json:"vrf"`
}

// Validate validates this machine allocation request
func (m *MachineAllocationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVrf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MachineAllocationRequest) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(m.Description), 1); err != nil {
		return err
	}

	return nil
}

func (m *MachineAllocationRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *MachineAllocationRequest) validateOs(formats strfmt.Registry) error {

	if swag.IsZero(m.Os) { // not required
		return nil
	}

	if err := validate.MinLength("os", "body", string(m.Os), 1); err != nil {
		return err
	}

	return nil
}

func (m *MachineAllocationRequest) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("project", "body", m.Project); err != nil {
		return err
	}

	if err := validate.MinLength("project", "body", string(*m.Project), 1); err != nil {
		return err
	}

	return nil
}

func (m *MachineAllocationRequest) validateTenant(formats strfmt.Registry) error {

	if err := validate.Required("tenant", "body", m.Tenant); err != nil {
		return err
	}

	if err := validate.MinLength("tenant", "body", string(*m.Tenant), 1); err != nil {
		return err
	}

	return nil
}

func (m *MachineAllocationRequest) validateVrf(formats strfmt.Registry) error {

	if err := validate.Required("vrf", "body", m.Vrf); err != nil {
		return err
	}

	if err := validate.MinLength("vrf", "body", string(*m.Vrf), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MachineAllocationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MachineAllocationRequest) UnmarshalBinary(b []byte) error {
	var res MachineAllocationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
