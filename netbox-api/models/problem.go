// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Problem problem
// swagger:model Problem
type Problem struct {

	// A human readable explanation specific to this occurrence of the
	// problem.
	//
	Detail string `json:"detail,omitempty"`

	// An absolute URI that identifies the specific occurrence of the problem.
	// It may or may not yield further information if dereferenced.
	//
	// Format: uri
	Instance strfmt.URI `json:"instance,omitempty"`

	// The HTTP status code generated by the origin server for this occurrence
	// of the problem.
	//
	// Maximum: < 600
	// Minimum: 100
	Status int32 `json:"status,omitempty"`

	// A short, summary of the problem type. Written in english and readable
	// for engineers (usually not suited for non technical stakeholders and
	// not localized); example: Service Unavailable
	//
	Title string `json:"title,omitempty"`

	// An absolute URI that identifies the problem type.  When dereferenced,
	// it SHOULD provide human-readable documentation for the problem type
	// (e.g., using HTML).
	//
	// Format: uri
	Type *strfmt.URI `json:"type,omitempty"`
}

// Validate validates this problem
func (m *Problem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Problem) validateInstance(formats strfmt.Registry) error {

	if swag.IsZero(m.Instance) { // not required
		return nil
	}

	if err := validate.FormatOf("instance", "body", "uri", m.Instance.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Problem) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := validate.MinimumInt("status", "body", int64(m.Status), 100, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("status", "body", int64(m.Status), 600, true); err != nil {
		return err
	}

	return nil
}

func (m *Problem) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.FormatOf("type", "body", "uri", m.Type.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Problem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Problem) UnmarshalBinary(b []byte) error {
	var res Problem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
