// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.0
// 	protoc        v3.11.4
// source: v1/network.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common      *Common               `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	PartitionID *wrappers.StringValue `protobuf:"bytes,2,opt,name=partitionID,proto3" json:"partitionID,omitempty"`                                                                               // the partition this network belongs to
	ProjectID   *wrappers.StringValue `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`                                                                                   // the project id this network belongs to, can be empty if globally available
	Labels      map[string]string     `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // free labels that you associate with this network
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_v1_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_v1_network_proto_rawDescGZIP(), []int{0}
}

func (x *Network) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *Network) GetPartitionID() *wrappers.StringValue {
	if x != nil {
		return x.PartitionID
	}
	return nil
}

func (x *Network) GetProjectID() *wrappers.StringValue {
	if x != nil {
		return x.ProjectID
	}
	return nil
}

func (x *Network) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// a network which contains prefixes from which IP addresses can be allocated
type NetworkImmutable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefixes            []string              `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`                       // the prefixes of this network
	DestinationPrefixes []string              `protobuf:"bytes,2,rep,name=destinationPrefixes,proto3" json:"destinationPrefixes,omitempty"` // the prefixes that are reachable within this network
	Nat                 bool                  `protobuf:"varint,3,opt,name=nat,proto3" json:"nat,omitempty"`                                // if set to true, packets leaving this network get masqueraded behind interface ip
	PrivateSuper        bool                  `protobuf:"varint,4,opt,name=privateSuper,proto3" json:"privateSuper,omitempty"`              // if set to true, this network will serve as a partition's super network for the internal machine networks,there can only be one privatesuper network per partition
	Underlay            bool                  `protobuf:"varint,5,opt,name=underlay,proto3" json:"underlay,omitempty"`                      // if set to true, this network can be used for underlay communication
	Vrf                 *wrappers.UInt64Value `protobuf:"bytes,6,opt,name=vrf,proto3" json:"vrf,omitempty"`                                 // the vrf this network is associated with
	VrfShared           *wrappers.BoolValue   `protobuf:"bytes,7,opt,name=vrfShared,proto3" json:"vrfShared,omitempty"`                     // if set to true, given vrf can be used by multiple networks, which is sometimes useful for network partitioning (default: false)
	ParentNetworkID     *wrappers.StringValue `protobuf:"bytes,8,opt,name=parentNetworkID,proto3" json:"parentNetworkID,omitempty"`         // the id of the parent network
}

func (x *NetworkImmutable) Reset() {
	*x = NetworkImmutable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkImmutable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkImmutable) ProtoMessage() {}

func (x *NetworkImmutable) ProtoReflect() protoreflect.Message {
	mi := &file_v1_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkImmutable.ProtoReflect.Descriptor instead.
func (*NetworkImmutable) Descriptor() ([]byte, []int) {
	return file_v1_network_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkImmutable) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *NetworkImmutable) GetDestinationPrefixes() []string {
	if x != nil {
		return x.DestinationPrefixes
	}
	return nil
}

func (x *NetworkImmutable) GetNat() bool {
	if x != nil {
		return x.Nat
	}
	return false
}

func (x *NetworkImmutable) GetPrivateSuper() bool {
	if x != nil {
		return x.PrivateSuper
	}
	return false
}

func (x *NetworkImmutable) GetUnderlay() bool {
	if x != nil {
		return x.Underlay
	}
	return false
}

func (x *NetworkImmutable) GetVrf() *wrappers.UInt64Value {
	if x != nil {
		return x.Vrf
	}
	return nil
}

func (x *NetworkImmutable) GetVrfShared() *wrappers.BoolValue {
	if x != nil {
		return x.VrfShared
	}
	return nil
}

func (x *NetworkImmutable) GetParentNetworkID() *wrappers.StringValue {
	if x != nil {
		return x.ParentNetworkID
	}
	return nil
}

type NetworkUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableIPs      uint64 `protobuf:"varint,1,opt,name=availableIPs,proto3" json:"availableIPs,omitempty"`           // the total available IPs //TODO readonly
	UsedIPs           uint64 `protobuf:"varint,2,opt,name=usedIPs,proto3" json:"usedIPs,omitempty"`                     // the total used IPs //TODO readonly
	AvailablePrefixes uint64 `protobuf:"varint,3,opt,name=availablePrefixes,proto3" json:"availablePrefixes,omitempty"` // the total available prefixes //TODO readonly
	UsedPrefixes      uint64 `protobuf:"varint,4,opt,name=usedPrefixes,proto3" json:"usedPrefixes,omitempty"`           // the total used prefixes //TODO readonly
}

func (x *NetworkUsage) Reset() {
	*x = NetworkUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkUsage) ProtoMessage() {}

func (x *NetworkUsage) ProtoReflect() protoreflect.Message {
	mi := &file_v1_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkUsage.ProtoReflect.Descriptor instead.
func (*NetworkUsage) Descriptor() ([]byte, []int) {
	return file_v1_network_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkUsage) GetAvailableIPs() uint64 {
	if x != nil {
		return x.AvailableIPs
	}
	return 0
}

func (x *NetworkUsage) GetUsedIPs() uint64 {
	if x != nil {
		return x.UsedIPs
	}
	return 0
}

func (x *NetworkUsage) GetAvailablePrefixes() uint64 {
	if x != nil {
		return x.AvailablePrefixes
	}
	return 0
}

func (x *NetworkUsage) GetUsedPrefixes() uint64 {
	if x != nil {
		return x.UsedPrefixes
	}
	return 0
}

// NetworkSearchQuery can be used to search networks.
type NetworkSearchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  *wrappers.StringValue   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                *wrappers.StringValue   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PartitionID         *wrappers.StringValue   `protobuf:"bytes,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	ProjectID           *wrappers.StringValue   `protobuf:"bytes,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Prefixes            []*wrappers.StringValue `protobuf:"bytes,5,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	DestinationPrefixes []*wrappers.StringValue `protobuf:"bytes,6,rep,name=destinationPrefixes,proto3" json:"destinationPrefixes,omitempty"`
	Nat                 *wrappers.BoolValue     `protobuf:"bytes,7,opt,name=nat,proto3" json:"nat,omitempty"`
	PrivateSuper        *wrappers.BoolValue     `protobuf:"bytes,8,opt,name=privateSuper,proto3" json:"privateSuper,omitempty"`
	Underlay            *wrappers.BoolValue     `protobuf:"bytes,9,opt,name=underlay,proto3" json:"underlay,omitempty"`
	Vrf                 *wrappers.UInt64Value   `protobuf:"bytes,10,opt,name=vrf,proto3" json:"vrf,omitempty"`
	VrfShared           *wrappers.BoolValue     `protobuf:"bytes,11,opt,name=vrfShared,proto3" json:"vrfShared,omitempty"` //TODO Not used
	ParentNetworkID     *wrappers.StringValue   `protobuf:"bytes,12,opt,name=parentNetworkID,proto3" json:"parentNetworkID,omitempty"`
	Labels              map[string]string       `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NetworkSearchQuery) Reset() {
	*x = NetworkSearchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkSearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSearchQuery) ProtoMessage() {}

func (x *NetworkSearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_v1_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSearchQuery.ProtoReflect.Descriptor instead.
func (*NetworkSearchQuery) Descriptor() ([]byte, []int) {
	return file_v1_network_proto_rawDescGZIP(), []int{3}
}

func (x *NetworkSearchQuery) GetID() *wrappers.StringValue {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *NetworkSearchQuery) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *NetworkSearchQuery) GetPartitionID() *wrappers.StringValue {
	if x != nil {
		return x.PartitionID
	}
	return nil
}

func (x *NetworkSearchQuery) GetProjectID() *wrappers.StringValue {
	if x != nil {
		return x.ProjectID
	}
	return nil
}

func (x *NetworkSearchQuery) GetPrefixes() []*wrappers.StringValue {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *NetworkSearchQuery) GetDestinationPrefixes() []*wrappers.StringValue {
	if x != nil {
		return x.DestinationPrefixes
	}
	return nil
}

func (x *NetworkSearchQuery) GetNat() *wrappers.BoolValue {
	if x != nil {
		return x.Nat
	}
	return nil
}

func (x *NetworkSearchQuery) GetPrivateSuper() *wrappers.BoolValue {
	if x != nil {
		return x.PrivateSuper
	}
	return nil
}

func (x *NetworkSearchQuery) GetUnderlay() *wrappers.BoolValue {
	if x != nil {
		return x.Underlay
	}
	return nil
}

func (x *NetworkSearchQuery) GetVrf() *wrappers.UInt64Value {
	if x != nil {
		return x.Vrf
	}
	return nil
}

func (x *NetworkSearchQuery) GetVrfShared() *wrappers.BoolValue {
	if x != nil {
		return x.VrfShared
	}
	return nil
}

func (x *NetworkSearchQuery) GetParentNetworkID() *wrappers.StringValue {
	if x != nil {
		return x.ParentNetworkID
	}
	return nil
}

func (x *NetworkSearchQuery) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type NetworkCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network          *Network          `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	NetworkImmutable *NetworkImmutable `protobuf:"bytes,2,opt,name=networkImmutable,proto3" json:"networkImmutable,omitempty"`
}

func (x *NetworkCreateRequest) Reset() {
	*x = NetworkCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkCreateRequest) ProtoMessage() {}

func (x *NetworkCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkCreateRequest.ProtoReflect.Descriptor instead.
func (*NetworkCreateRequest) Descriptor() ([]byte, []int) {
	return file_v1_network_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkCreateRequest) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *NetworkCreateRequest) GetNetworkImmutable() *NetworkImmutable {
	if x != nil {
		return x.NetworkImmutable
	}
	return nil
}

type NetworkUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network  *Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Prefixes []string `protobuf:"bytes,2,rep,name=prefixes,proto3" json:"prefixes,omitempty"` // the prefixes of this network
}

func (x *NetworkUpdateRequest) Reset() {
	*x = NetworkUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkUpdateRequest) ProtoMessage() {}

func (x *NetworkUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkUpdateRequest.ProtoReflect.Descriptor instead.
func (*NetworkUpdateRequest) Descriptor() ([]byte, []int) {
	return file_v1_network_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkUpdateRequest) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *NetworkUpdateRequest) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type NetworkFindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkSearchQuery *NetworkSearchQuery `protobuf:"bytes,1,opt,name=networkSearchQuery,proto3" json:"networkSearchQuery,omitempty"`
}

func (x *NetworkFindRequest) Reset() {
	*x = NetworkFindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkFindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkFindRequest) ProtoMessage() {}

func (x *NetworkFindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkFindRequest.ProtoReflect.Descriptor instead.
func (*NetworkFindRequest) Descriptor() ([]byte, []int) {
	return file_v1_network_proto_rawDescGZIP(), []int{6}
}

func (x *NetworkFindRequest) GetNetworkSearchQuery() *NetworkSearchQuery {
	if x != nil {
		return x.NetworkSearchQuery
	}
	return nil
}

type NetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network          *Network          `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	NetworkImmutable *NetworkImmutable `protobuf:"bytes,2,opt,name=networkImmutable,proto3" json:"networkImmutable,omitempty"`
	Usage            *NetworkUsage     `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"` // usage of ips and prefixes in this network //TODO readonly
}

func (x *NetworkResponse) Reset() {
	*x = NetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_network_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkResponse) ProtoMessage() {}

func (x *NetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_network_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkResponse.ProtoReflect.Descriptor instead.
func (*NetworkResponse) Descriptor() ([]byte, []int) {
	return file_v1_network_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkResponse) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *NetworkResponse) GetNetworkImmutable() *NetworkImmutable {
	if x != nil {
		return x.NetworkImmutable
	}
	return nil
}

func (x *NetworkResponse) GetUsage() *NetworkUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type NetworkListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NetworkListRequest) Reset() {
	*x = NetworkListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_network_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkListRequest) ProtoMessage() {}

func (x *NetworkListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_network_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkListRequest.ProtoReflect.Descriptor instead.
func (*NetworkListRequest) Descriptor() ([]byte, []int) {
	return file_v1_network_proto_rawDescGZIP(), []int{8}
}

type NetworkListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *NetworkListResponse) Reset() {
	*x = NetworkListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_network_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkListResponse) ProtoMessage() {}

func (x *NetworkListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_network_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkListResponse.ProtoReflect.Descriptor instead.
func (*NetworkListResponse) Descriptor() ([]byte, []int) {
	return file_v1_network_proto_rawDescGZIP(), []int{9}
}

func (x *NetworkListResponse) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

var File_v1_network_proto protoreflect.FileDescriptor

var file_v1_network_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x02, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe4, 0x02, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6d, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6e, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x76, 0x72, 0x66, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x72, 0x66, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x76, 0x72, 0x66, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x46,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x64, 0x49, 0x50, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x64, 0x49, 0x50, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0xc9, 0x06, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2c,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3a,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x6e, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6e,
	0x61, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x76, 0x72,
	0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x72,
	0x66, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x76, 0x72, 0x66, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x7f, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x40, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6d, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x59, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22,
	0x5c, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0xa2, 0x01,
	0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x40, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x32, 0xf4, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_network_proto_rawDescOnce sync.Once
	file_v1_network_proto_rawDescData = file_v1_network_proto_rawDesc
)

func file_v1_network_proto_rawDescGZIP() []byte {
	file_v1_network_proto_rawDescOnce.Do(func() {
		file_v1_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_network_proto_rawDescData)
	})
	return file_v1_network_proto_rawDescData
}

var file_v1_network_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_v1_network_proto_goTypes = []interface{}{
	(*Network)(nil),              // 0: v1.Network
	(*NetworkImmutable)(nil),     // 1: v1.NetworkImmutable
	(*NetworkUsage)(nil),         // 2: v1.NetworkUsage
	(*NetworkSearchQuery)(nil),   // 3: v1.NetworkSearchQuery
	(*NetworkCreateRequest)(nil), // 4: v1.NetworkCreateRequest
	(*NetworkUpdateRequest)(nil), // 5: v1.NetworkUpdateRequest
	(*NetworkFindRequest)(nil),   // 6: v1.NetworkFindRequest
	(*NetworkResponse)(nil),      // 7: v1.NetworkResponse
	(*NetworkListRequest)(nil),   // 8: v1.NetworkListRequest
	(*NetworkListResponse)(nil),  // 9: v1.NetworkListResponse
	nil,                          // 10: v1.Network.LabelsEntry
	nil,                          // 11: v1.NetworkSearchQuery.LabelsEntry
	(*Common)(nil),               // 12: v1.Common
	(*wrappers.StringValue)(nil), // 13: google.protobuf.StringValue
	(*wrappers.UInt64Value)(nil), // 14: google.protobuf.UInt64Value
	(*wrappers.BoolValue)(nil),   // 15: google.protobuf.BoolValue
}
var file_v1_network_proto_depIdxs = []int32{
	12, // 0: v1.Network.common:type_name -> v1.Common
	13, // 1: v1.Network.partitionID:type_name -> google.protobuf.StringValue
	13, // 2: v1.Network.projectID:type_name -> google.protobuf.StringValue
	10, // 3: v1.Network.labels:type_name -> v1.Network.LabelsEntry
	14, // 4: v1.NetworkImmutable.vrf:type_name -> google.protobuf.UInt64Value
	15, // 5: v1.NetworkImmutable.vrfShared:type_name -> google.protobuf.BoolValue
	13, // 6: v1.NetworkImmutable.parentNetworkID:type_name -> google.protobuf.StringValue
	13, // 7: v1.NetworkSearchQuery.ID:type_name -> google.protobuf.StringValue
	13, // 8: v1.NetworkSearchQuery.name:type_name -> google.protobuf.StringValue
	13, // 9: v1.NetworkSearchQuery.partitionID:type_name -> google.protobuf.StringValue
	13, // 10: v1.NetworkSearchQuery.projectID:type_name -> google.protobuf.StringValue
	13, // 11: v1.NetworkSearchQuery.prefixes:type_name -> google.protobuf.StringValue
	13, // 12: v1.NetworkSearchQuery.destinationPrefixes:type_name -> google.protobuf.StringValue
	15, // 13: v1.NetworkSearchQuery.nat:type_name -> google.protobuf.BoolValue
	15, // 14: v1.NetworkSearchQuery.privateSuper:type_name -> google.protobuf.BoolValue
	15, // 15: v1.NetworkSearchQuery.underlay:type_name -> google.protobuf.BoolValue
	14, // 16: v1.NetworkSearchQuery.vrf:type_name -> google.protobuf.UInt64Value
	15, // 17: v1.NetworkSearchQuery.vrfShared:type_name -> google.protobuf.BoolValue
	13, // 18: v1.NetworkSearchQuery.parentNetworkID:type_name -> google.protobuf.StringValue
	11, // 19: v1.NetworkSearchQuery.labels:type_name -> v1.NetworkSearchQuery.LabelsEntry
	0,  // 20: v1.NetworkCreateRequest.network:type_name -> v1.Network
	1,  // 21: v1.NetworkCreateRequest.networkImmutable:type_name -> v1.NetworkImmutable
	0,  // 22: v1.NetworkUpdateRequest.network:type_name -> v1.Network
	3,  // 23: v1.NetworkFindRequest.networkSearchQuery:type_name -> v1.NetworkSearchQuery
	0,  // 24: v1.NetworkResponse.network:type_name -> v1.Network
	1,  // 25: v1.NetworkResponse.networkImmutable:type_name -> v1.NetworkImmutable
	2,  // 26: v1.NetworkResponse.usage:type_name -> v1.NetworkUsage
	0,  // 27: v1.NetworkListResponse.networks:type_name -> v1.Network
	4,  // 28: v1.NetworkService.Create:input_type -> v1.NetworkCreateRequest
	5,  // 29: v1.NetworkService.Update:input_type -> v1.NetworkUpdateRequest
	6,  // 30: v1.NetworkService.Find:input_type -> v1.NetworkFindRequest
	8,  // 31: v1.NetworkService.List:input_type -> v1.NetworkListRequest
	7,  // 32: v1.NetworkService.Create:output_type -> v1.NetworkResponse
	7,  // 33: v1.NetworkService.Update:output_type -> v1.NetworkResponse
	9,  // 34: v1.NetworkService.Find:output_type -> v1.NetworkListResponse
	9,  // 35: v1.NetworkService.List:output_type -> v1.NetworkListResponse
	32, // [32:36] is the sub-list for method output_type
	28, // [28:32] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_v1_network_proto_init() }
func file_v1_network_proto_init() {
	if File_v1_network_proto != nil {
		return
	}
	file_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkImmutable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkSearchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkFindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_network_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_network_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_network_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_network_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_network_proto_goTypes,
		DependencyIndexes: file_v1_network_proto_depIdxs,
		MessageInfos:      file_v1_network_proto_msgTypes,
	}.Build()
	File_v1_network_proto = out.File
	file_v1_network_proto_rawDesc = nil
	file_v1_network_proto_goTypes = nil
	file_v1_network_proto_depIdxs = nil
}
